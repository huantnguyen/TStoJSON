{
  "version": 3,
  "sources": ["../../../../result/definitions/__tests__/reactiveEnergy.test.ts"],
  "sourcesContent": ["import configureMeasurements from '../..';\nimport reactiveEnergy, {\n  ReactiveEnergySystems,\n  ReactiveEnergyUnits,\n} from '../reactiveEnergy';\n\ntest('VARh to VARh', () => {\n  const convert = configureMeasurements<\n    'reactiveEnergy',\n    ReactiveEnergySystems,\n    ReactiveEnergyUnits\n  >({\n    reactiveEnergy,\n  });\n  expect(convert(1).from('VARh').to('VARh')).toBe(1);\n});\n\ntest('mVARh to mVARh', () => {\n  const convert = configureMeasurements<\n    'reactiveEnergy',\n    ReactiveEnergySystems,\n    ReactiveEnergyUnits\n  >({\n    reactiveEnergy,\n  });\n  expect(convert(1).from('mVARh').to('mVARh')).toBe(1);\n});\n\ntest('kVARh to kVARh', () => {\n  const convert = configureMeasurements<\n    'reactiveEnergy',\n    ReactiveEnergySystems,\n    ReactiveEnergyUnits\n  >({\n    reactiveEnergy,\n  });\n  expect(convert(1).from('kVARh').to('kVARh')).toBe(1);\n});\n\ntest('MVARh to MVARh', () => {\n  const convert = configureMeasurements<\n    'reactiveEnergy',\n    ReactiveEnergySystems,\n    ReactiveEnergyUnits\n  >({\n    reactiveEnergy,\n  });\n  expect(convert(1).from('MVARh').to('MVARh')).toBe(1);\n});\n\ntest('GVARh to GVARh', () => {\n  const convert = configureMeasurements<\n    'reactiveEnergy',\n    ReactiveEnergySystems,\n    ReactiveEnergyUnits\n  >({\n    reactiveEnergy,\n  });\n  expect(convert(1).from('GVARh').to('GVARh')).toBe(1);\n});\n\ntest('VARh to mVARh', () => {\n  const convert = configureMeasurements<\n    'reactiveEnergy',\n    ReactiveEnergySystems,\n    ReactiveEnergyUnits\n  >({\n    reactiveEnergy,\n  });\n  expect(convert(1).from('VARh').to('mVARh')).toBe(1000);\n});\n\ntest('VARh to kVARh', () => {\n  const convert = configureMeasurements<\n    'reactiveEnergy',\n    ReactiveEnergySystems,\n    ReactiveEnergyUnits\n  >({\n    reactiveEnergy,\n  });\n  expect(convert(1).from('VARh').to('kVARh')).toBe(0.001);\n});\n\ntest('VARh to MVARh', () => {\n  const convert = configureMeasurements<\n    'reactiveEnergy',\n    ReactiveEnergySystems,\n    ReactiveEnergyUnits\n  >({\n    reactiveEnergy,\n  });\n  expect(convert(1).from('VARh').to('MVARh')).toBe(0.000001);\n});\n\ntest('VARh to GVARh', () => {\n  const convert = configureMeasurements<\n    'reactiveEnergy',\n    ReactiveEnergySystems,\n    ReactiveEnergyUnits\n  >({\n    reactiveEnergy,\n  });\n  expect(convert(1).from('VARh').to('GVARh')).toBe(0.000000001);\n});\n\ntest('GVARh to mVARh', () => {\n  const convert = configureMeasurements<\n    'reactiveEnergy',\n    ReactiveEnergySystems,\n    ReactiveEnergyUnits\n  >({\n    reactiveEnergy,\n  });\n  expect(convert(1).from('GVARh').to('mVARh')).toBe(1000000000000);\n});\n\ntest('MVARh to mVARh', () => {\n  const convert = configureMeasurements<\n    'reactiveEnergy',\n    ReactiveEnergySystems,\n    ReactiveEnergyUnits\n  >({\n    reactiveEnergy,\n  });\n  expect(convert(1).from('MVARh').to('mVARh')).toBe(1000000000);\n});\n\ntest('kVARh to mVARh', () => {\n  const convert = configureMeasurements<\n    'reactiveEnergy',\n    ReactiveEnergySystems,\n    ReactiveEnergyUnits\n  >({\n    reactiveEnergy,\n  });\n  expect(convert(1).from('kVARh').to('mVARh')).toBe(1000000);\n});\n\ntest('mVARh to kVARh', () => {\n  const convert = configureMeasurements<\n    'reactiveEnergy',\n    ReactiveEnergySystems,\n    ReactiveEnergyUnits\n  >({\n    reactiveEnergy,\n  });\n  expect(convert(1).from('mVARh').to('kVARh')).toBe(0.000001);\n});\n\ntest('mVARh to VARh', () => {\n  const convert = configureMeasurements<\n    'reactiveEnergy',\n    ReactiveEnergySystems,\n    ReactiveEnergyUnits\n  >({\n    reactiveEnergy,\n  });\n  expect(convert(1).from('mVARh').to('VARh')).toBe(0.001);\n});\n\ntest('kVARh to VARh', () => {\n  const convert = configureMeasurements<\n    'reactiveEnergy',\n    ReactiveEnergySystems,\n    ReactiveEnergyUnits\n  >({\n    reactiveEnergy,\n  });\n  expect(convert(1).from('kVARh').to('VARh')).toBe(1000);\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA,eAAkC;AAClC,4BAGO;AAEP,KAAK,gBAAgB,MAAM;AACzB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,QAAQ,GAAG,SAAS,KAAK;AAAA;AAGlD,KAAK,kBAAkB,MAAM;AAC3B,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,SAAS,GAAG,UAAU,KAAK;AAAA;AAGpD,KAAK,kBAAkB,MAAM;AAC3B,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,SAAS,GAAG,UAAU,KAAK;AAAA;AAGpD,KAAK,kBAAkB,MAAM;AAC3B,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,SAAS,GAAG,UAAU,KAAK;AAAA;AAGpD,KAAK,kBAAkB,MAAM;AAC3B,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,SAAS,GAAG,UAAU,KAAK;AAAA;AAGpD,KAAK,iBAAiB,MAAM;AAC1B,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,QAAQ,GAAG,UAAU,KAAK;AAAA;AAGnD,KAAK,iBAAiB,MAAM;AAC1B,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,QAAQ,GAAG,UAAU,KAAK;AAAA;AAGnD,KAAK,iBAAiB,MAAM;AAC1B,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,QAAQ,GAAG,UAAU,KAAK;AAAA;AAGnD,KAAK,iBAAiB,MAAM;AAC1B,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,QAAQ,GAAG,UAAU,KAAK;AAAA;AAGnD,KAAK,kBAAkB,MAAM;AAC3B,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,SAAS,GAAG,UAAU,KAAK;AAAA;AAGpD,KAAK,kBAAkB,MAAM;AAC3B,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,SAAS,GAAG,UAAU,KAAK;AAAA;AAGpD,KAAK,kBAAkB,MAAM;AAC3B,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,SAAS,GAAG,UAAU,KAAK;AAAA;AAGpD,KAAK,kBAAkB,MAAM;AAC3B,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,SAAS,GAAG,UAAU,KAAK;AAAA;AAGpD,KAAK,iBAAiB,MAAM;AAC1B,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,SAAS,GAAG,SAAS,KAAK;AAAA;AAGnD,KAAK,iBAAiB,MAAM;AAC1B,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,SAAS,GAAG,SAAS,KAAK;AAAA;",
  "names": []
}
