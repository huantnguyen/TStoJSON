{
  "version": 3,
  "sources": ["../../../../result/definitions/__tests__/length.test.ts"],
  "sourcesContent": ["import configureMeasurements from '../..';\nimport length, { LengthSystems, LengthUnits } from '../length';\n\ntest('ft to ft', () => {\n  const convert = configureMeasurements<'length', LengthSystems, LengthUnits>({\n    length,\n  });\n  expect(convert(1).from('ft').to('ft')).toBe(1);\n});\n\ntest('ft to ft-us', () => {\n  const convert = configureMeasurements<'length', LengthSystems, LengthUnits>({\n    length,\n  });\n  expect(convert(1).from('ft').to('ft-us')).toBe(0.999998000004);\n});\n\ntest('ft-us to ft', () => {\n  const convert = configureMeasurements<'length', LengthSystems, LengthUnits>({\n    length,\n  });\n  expect(convert(1).from('ft-us').to('ft')).toBe(1.000002);\n});\n\ntest('in to in', () => {\n  const convert = configureMeasurements<'length', LengthSystems, LengthUnits>({\n    length,\n  });\n  expect(convert(7).from('in').to('in')).toBe(7);\n});\n\ntest('ft to in', () => {\n  const convert = configureMeasurements<'length', LengthSystems, LengthUnits>({\n    length,\n  });\n  expect(convert(1).from('ft').to('in')).toBe(12);\n});\n\ntest('in to ft', () => {\n  const convert = configureMeasurements<'length', LengthSystems, LengthUnits>({\n    length,\n  });\n  expect(convert(1).from('in').to('ft')).toBe(1 / 12);\n});\n\ntest('ft to mi', () => {\n  const convert = configureMeasurements<'length', LengthSystems, LengthUnits>({\n    length,\n  });\n  expect(convert(1).from('ft').to('mi')).toBe(1 / 5280);\n});\n\ntest('mi to ft', () => {\n  const convert = configureMeasurements<'length', LengthSystems, LengthUnits>({\n    length,\n  });\n  expect(convert(1).from('mi').to('ft')).toBe(5280);\n});\n\ntest('nMi to mi', () => {\n  const convert = configureMeasurements<'length', LengthSystems, LengthUnits>({\n    length,\n  });\n  expect(convert(1).from('nMi').to('mi')).toBe(1.150780303030303);\n});\n\ntest('m to m', () => {\n  const convert = configureMeasurements<'length', LengthSystems, LengthUnits>({\n    length,\n  });\n  expect(convert(1).from('m').to('m')).toBe(1);\n});\n\ntest('m to cm', () => {\n  const convert = configureMeasurements<'length', LengthSystems, LengthUnits>({\n    length,\n  });\n  expect(convert(1).from('m').to('cm')).toBe(1e2);\n});\n\ntest('cm to m', () => {\n  const convert = configureMeasurements<'length', LengthSystems, LengthUnits>({\n    length,\n  });\n  expect(convert(1).from('cm').to('m')).toBe(1e-2);\n});\n\ntest('m to mm', () => {\n  const convert = configureMeasurements<'length', LengthSystems, LengthUnits>({\n    length,\n  });\n  expect(convert(1).from('m').to('mm')).toBe(1e3);\n});\n\ntest('km to m', () => {\n  const convert = configureMeasurements<'length', LengthSystems, LengthUnits>({\n    length,\n  });\n  expect(convert(1).from('km').to('m')).toBe(1e3);\n});\n\ntest('m to ft', () => {\n  const convert = configureMeasurements<'length', LengthSystems, LengthUnits>({\n    length,\n  });\n  expect(convert(1).from('m').to('ft')).toBeCloseTo(3.28084);\n});\n\ntest('m to ft-us', () => {\n  const convert = configureMeasurements<'length', LengthSystems, LengthUnits>({\n    length,\n  });\n  expect(convert(1).from('m').to('ft-us')).toBeCloseTo(3.28084);\n});\n\ntest('mm to ft', () => {\n  const convert = configureMeasurements<'length', LengthSystems, LengthUnits>({\n    length,\n  });\n  expect(convert(1).from('mm').to('ft')).toBeCloseTo(0.00328084);\n});\n\ntest('nMi to m', () => {\n  const convert = configureMeasurements<'length', LengthSystems, LengthUnits>({\n    length,\n  });\n  expect(convert(1).from('nMi').to('m')).toBeCloseTo(1852);\n});\n\ntest('km to nMi', () => {\n  const convert = configureMeasurements<'length', LengthSystems, LengthUnits>({\n    length,\n  });\n  expect(convert(1).from('km').to('nMi')).toBeCloseTo(0.539956803);\n});\n\ntest('fathom to m', () => {\n  const convert = configureMeasurements<'length', LengthSystems, LengthUnits>({\n    length,\n  });\n  expect(convert(1).from('fathom').to('m')).toBeCloseTo(1.8288);\n});\n\ntest('nm to nm', () => {\n  const convert = configureMeasurements<'length', LengthSystems, LengthUnits>({\n    length,\n  });\n  expect(convert(1).from('nm').to('nm')).toBe(1);\n});\n\ntest('nm to m', () => {\n  const convert = configureMeasurements<'length', LengthSystems, LengthUnits>({\n    length,\n  });\n  expect(convert(1).from('nm').to('m')).toBe(1e-9);\n});\n\ntest('\u03BCm to \u03BCm', () => {\n  const convert = configureMeasurements<'length', LengthSystems, LengthUnits>({\n    length,\n  });\n  expect(convert(1).from('\u03BCm').to('\u03BCm')).toBe(1);\n});\n\ntest('\u03BCm to m', () => {\n  const convert = configureMeasurements<'length', LengthSystems, LengthUnits>({\n    length,\n  });\n  expect(convert(1).from('\u03BCm').to('m')).toBe(1e-6);\n});\n\ntest('m to \u00B5m', () => {\n  const convert = configureMeasurements<'length', LengthSystems, LengthUnits>({\n    length,\n  });\n  expect(convert(1).from('m').to('\u03BCm')).toEqual(1e6);\n});\n\ntest('m to nm', () => {\n  const convert = configureMeasurements<'length', LengthSystems, LengthUnits>({\n    length,\n  });\n  expect(convert(1).from('m').to('nm')).toBeCloseTo(1e9);\n});\n"],
  "mappings": "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",
  "names": []
}
