{
  "version": 3,
  "sources": ["../../../../result/definitions/__tests__/volumeFlowRate.test.ts"],
  "sourcesContent": ["import configureMeasurements from '../..';\nimport volumeFlowRate, {\n  VolumeFlowRateSystems,\n  VolumeFlowRateUnits,\n} from '../volumeFlowRate';\n\ntest('l/s to l/s', () => {\n  const convert = configureMeasurements<\n    'volumeFlowRate',\n    VolumeFlowRateSystems,\n    VolumeFlowRateUnits\n  >({\n    volumeFlowRate,\n  });\n  expect(convert(2).from('l/s').to('l/s')).toBe(2);\n});\n\ntest('mm3/s to l/s', () => {\n  const convert = configureMeasurements<\n    'volumeFlowRate',\n    VolumeFlowRateSystems,\n    VolumeFlowRateUnits\n  >({\n    volumeFlowRate,\n  });\n  expect(convert(1000000).from('mm3/s').to('l/s')).toBe(1);\n});\n\ntest('cm3/s to l/s', () => {\n  const convert = configureMeasurements<\n    'volumeFlowRate',\n    VolumeFlowRateSystems,\n    VolumeFlowRateUnits\n  >({\n    volumeFlowRate,\n  });\n  expect(convert(100).from('cm3/s').to('l/s')).toBe(1 / 10);\n});\n\ntest('dl/s to l/s', () => {\n  const convert = configureMeasurements<\n    'volumeFlowRate',\n    VolumeFlowRateSystems,\n    VolumeFlowRateUnits\n  >({\n    volumeFlowRate,\n  });\n  expect(convert(2).from('dl/s').to('l/s')).toBe(0.2);\n});\n\ntest('cl/s to l/s', () => {\n  const convert = configureMeasurements<\n    'volumeFlowRate',\n    VolumeFlowRateSystems,\n    VolumeFlowRateUnits\n  >({\n    volumeFlowRate,\n  });\n  expect(convert(25).from('cl/s').to('l/s')).toBe(0.25);\n});\n\ntest('ml/s to l/s', () => {\n  const convert = configureMeasurements<\n    'volumeFlowRate',\n    VolumeFlowRateSystems,\n    VolumeFlowRateUnits\n  >({\n    volumeFlowRate,\n  });\n  expect(convert(100).from('ml/s').to('l/s')).toBe(1 / 10);\n});\n\ntest('m3/s to l/s', () => {\n  const convert = configureMeasurements<\n    'volumeFlowRate',\n    VolumeFlowRateSystems,\n    VolumeFlowRateUnits\n  >({\n    volumeFlowRate,\n  });\n  expect(convert(1).from('m3/s').to('l/s')).toBe(1000);\n});\n\ntest('km3/s to l/s', () => {\n  const convert = configureMeasurements<\n    'volumeFlowRate',\n    VolumeFlowRateSystems,\n    VolumeFlowRateUnits\n  >({\n    volumeFlowRate,\n  });\n  expect(convert(1).from('km3/s').to('l/s')).toBe(1000000000000);\n});\n\ntest('l/s to ml/s', () => {\n  const convert = configureMeasurements<\n    'volumeFlowRate',\n    VolumeFlowRateSystems,\n    VolumeFlowRateUnits\n  >({\n    volumeFlowRate,\n  });\n  expect(convert(1).from('l/s').to('ml/s')).toBe(1000);\n});\n\ntest('dl/s to ml/s', () => {\n  const convert = configureMeasurements<\n    'volumeFlowRate',\n    VolumeFlowRateSystems,\n    VolumeFlowRateUnits\n  >({\n    volumeFlowRate,\n  });\n  expect(convert(10).from('dl/s').to('ml/s')).toBe(1000);\n});\n\ntest('cl/s to ml/s', () => {\n  const convert = configureMeasurements<\n    'volumeFlowRate',\n    VolumeFlowRateSystems,\n    VolumeFlowRateUnits\n  >({\n    volumeFlowRate,\n  });\n  expect(convert(100).from('cl/s').to('ml/s')).toBe(1000);\n});\n\ntest('ml/s to ml/s', () => {\n  const convert = configureMeasurements<\n    'volumeFlowRate',\n    VolumeFlowRateSystems,\n    VolumeFlowRateUnits\n  >({\n    volumeFlowRate,\n  });\n  expect(convert(13).from('ml/s').to('ml/s')).toBe(13);\n});\n\ntest('fl-oz/s to fl-oz/s', () => {\n  const convert = configureMeasurements<\n    'volumeFlowRate',\n    VolumeFlowRateSystems,\n    VolumeFlowRateUnits\n  >({\n    volumeFlowRate,\n  });\n  expect(convert(62).from('fl-oz/s').to('fl-oz/s')).toBe(62);\n});\n\ntest('fl-oz/s to Tbs/s', () => {\n  const convert = configureMeasurements<\n    'volumeFlowRate',\n    VolumeFlowRateSystems,\n    VolumeFlowRateUnits\n  >({\n    volumeFlowRate,\n  });\n  expect(convert(4).from('fl-oz/s').to('Tbs/s')).toBe(8);\n});\n\ntest('Tbs/s to fl-oz/s', () => {\n  const convert = configureMeasurements<\n    'volumeFlowRate',\n    VolumeFlowRateSystems,\n    VolumeFlowRateUnits\n  >({\n    volumeFlowRate,\n  });\n  expect(convert(2).from('Tbs/s').to('fl-oz/s')).toBe(1);\n});\n\ntest('Tbs/s to Tbs/s', () => {\n  const convert = configureMeasurements<\n    'volumeFlowRate',\n    VolumeFlowRateSystems,\n    VolumeFlowRateUnits\n  >({\n    volumeFlowRate,\n  });\n  expect(convert(140).from('Tbs/s').to('Tbs/s')).toBe(140);\n});\n\ntest('l/s to l/min', () => {\n  const convert = configureMeasurements<\n    'volumeFlowRate',\n    VolumeFlowRateSystems,\n    VolumeFlowRateUnits\n  >({\n    volumeFlowRate,\n  });\n  expect(convert(1).from('l/s').to('l/min')).toBe(60);\n});\n\ntest('l/s to l/h', () => {\n  const convert = configureMeasurements<\n    'volumeFlowRate',\n    VolumeFlowRateSystems,\n    VolumeFlowRateUnits\n  >({\n    volumeFlowRate,\n  });\n  expect(convert(1).from('l/s').to('l/h')).toBe(3600);\n});\n\ntest('kl/s to kl/h', () => {\n  const convert = configureMeasurements<\n    'volumeFlowRate',\n    VolumeFlowRateSystems,\n    VolumeFlowRateUnits\n  >({\n    volumeFlowRate,\n  });\n  expect(convert(1).from('kl/s').to('kl/h')).toBe(3600);\n});\n\ntest('l/s to kl/h', () => {\n  const convert = configureMeasurements<\n    'volumeFlowRate',\n    VolumeFlowRateSystems,\n    VolumeFlowRateUnits\n  >({\n    volumeFlowRate,\n  });\n  expect(convert(1).from('l/s').to('kl/h')).toBeCloseTo(3.6);\n});\n\ntest('l/s to m3/s', () => {\n  const convert = configureMeasurements<\n    'volumeFlowRate',\n    VolumeFlowRateSystems,\n    VolumeFlowRateUnits\n  >({\n    volumeFlowRate,\n  });\n  expect(convert(1).from('l/s').to('m3/s')).toBe(0.001);\n});\n\ntest('m3/s to m3/h', () => {\n  const convert = configureMeasurements<\n    'volumeFlowRate',\n    VolumeFlowRateSystems,\n    VolumeFlowRateUnits\n  >({\n    volumeFlowRate,\n  });\n  expect(convert(1).from('kl/s').to('kl/h')).toBe(3600);\n});\n\ntest('tsp/s to l/s', () => {\n  const convert = configureMeasurements<\n    'volumeFlowRate',\n    VolumeFlowRateSystems,\n    VolumeFlowRateUnits\n  >({\n    volumeFlowRate,\n  });\n  expect(convert(355).from('tsp/s').to('l/s')).toBeCloseTo(1.75);\n});\n\ntest('in3/s to l/s', () => {\n  const convert = configureMeasurements<\n    'volumeFlowRate',\n    VolumeFlowRateSystems,\n    VolumeFlowRateUnits\n  >({\n    volumeFlowRate,\n  });\n  expect(convert(1).from('in3/s').to('l/s')).toBeCloseTo(0.0163871);\n});\n\ntest('in3/s to fl-oz/s', () => {\n  const convert = configureMeasurements<\n    'volumeFlowRate',\n    VolumeFlowRateSystems,\n    VolumeFlowRateUnits\n  >({\n    volumeFlowRate,\n  });\n  expect(convert(1).from('in3/s').to('fl-oz/s')).toBeCloseTo(0.554113);\n});\n\ntest('m3/s to yd3/s', () => {\n  const convert = configureMeasurements<\n    'volumeFlowRate',\n    VolumeFlowRateSystems,\n    VolumeFlowRateUnits\n  >({\n    volumeFlowRate,\n  });\n  expect(convert(1).from('m3/s').to('yd3/s')).toBeCloseTo(1.30795);\n});\n\ntest('ft3/s to cm3/s', () => {\n  const convert = configureMeasurements<\n    'volumeFlowRate',\n    VolumeFlowRateSystems,\n    VolumeFlowRateUnits\n  >({\n    volumeFlowRate,\n  });\n  expect(convert(1).from('ft3/s').to('cm3/s')).toBeCloseTo(28316.832);\n});\n\ntest('pnt/s to ml/s', () => {\n  const convert = configureMeasurements<\n    'volumeFlowRate',\n    VolumeFlowRateSystems,\n    VolumeFlowRateUnits\n  >({\n    volumeFlowRate,\n  });\n  expect(convert(5).from('pnt/s').to('ml/s')).toBeCloseTo(2365.882);\n});\n\ntest('ml/s to gal/s', () => {\n  const convert = configureMeasurements<\n    'volumeFlowRate',\n    VolumeFlowRateSystems,\n    VolumeFlowRateUnits\n  >({\n    volumeFlowRate,\n  });\n  expect(convert(9876).from('ml/s').to('gal/s')).toBeCloseTo(2.609);\n});\n\ntest('gal/s to l/s', () => {\n  const convert = configureMeasurements<\n    'volumeFlowRate',\n    VolumeFlowRateSystems,\n    VolumeFlowRateUnits\n  >({\n    volumeFlowRate,\n  });\n  expect(convert(1).from('gal/s').to('l/s')).toBeCloseTo(3.78541178);\n});\n\ntest('kl/s to kl/min', () => {\n  const convert = configureMeasurements<\n    'volumeFlowRate',\n    VolumeFlowRateSystems,\n    VolumeFlowRateUnits\n  >({\n    volumeFlowRate,\n  });\n  expect(convert(1).from('kl/s').to('kl/min')).toBeCloseTo(60);\n});\n\ntest('l/s to kl/h', () => {\n  const convert = configureMeasurements<\n    'volumeFlowRate',\n    VolumeFlowRateSystems,\n    VolumeFlowRateUnits\n  >({\n    volumeFlowRate,\n  });\n  expect(convert(1).from('l/s').to('kl/h')).toBeCloseTo(3.6);\n});\n\ntest('kl/min to l/h', () => {\n  const convert = configureMeasurements<\n    'volumeFlowRate',\n    VolumeFlowRateSystems,\n    VolumeFlowRateUnits\n  >({\n    volumeFlowRate,\n  });\n  expect(convert(1).from('kl/min').to('l/h')).toBeCloseTo(60000);\n});\n\ntest('l/s to m3/h', () => {\n  const convert = configureMeasurements<\n    'volumeFlowRate',\n    VolumeFlowRateSystems,\n    VolumeFlowRateUnits\n  >({\n    volumeFlowRate,\n  });\n  expect(convert(1).from('l/s').to('m3/h')).toBeCloseTo(3.6);\n});\n\ntest('m3/s to kl/h', () => {\n  const convert = configureMeasurements<\n    'volumeFlowRate',\n    VolumeFlowRateSystems,\n    VolumeFlowRateUnits\n  >({\n    volumeFlowRate,\n  });\n  expect(convert(1).from('m3/s').to('kl/h')).toBeCloseTo(3600);\n});\n\ntest('fl-oz/s to m3/min', () => {\n  const convert = configureMeasurements<\n    'volumeFlowRate',\n    VolumeFlowRateSystems,\n    VolumeFlowRateUnits\n  >({\n    volumeFlowRate,\n  });\n  expect(convert(1).from('fl-oz/s').to('m3/min')).toBeCloseTo(0.00177441177);\n});\n\ntest('ft3/min to l/s', () => {\n  const convert = configureMeasurements<\n    'volumeFlowRate',\n    VolumeFlowRateSystems,\n    VolumeFlowRateUnits\n  >({\n    volumeFlowRate,\n  });\n  expect(convert(1).from('ft3/min').to('l/s')).toBeCloseTo(0.471947443);\n});\n\ntest('pnt/min to kl/h', () => {\n  const convert = configureMeasurements<\n    'volumeFlowRate',\n    VolumeFlowRateSystems,\n    VolumeFlowRateUnits\n  >({\n    volumeFlowRate,\n  });\n  expect(convert(1).from('pnt/min').to('kl/h')).toBeCloseTo(0.0283905884);\n});\n\ntest('yd3/h to m3/min', () => {\n  const convert = configureMeasurements<\n    'volumeFlowRate',\n    VolumeFlowRateSystems,\n    VolumeFlowRateUnits\n  >({\n    volumeFlowRate,\n  });\n  expect(convert(1).from('yd3/h').to('m3/min')).toBeCloseTo(0.012742581);\n});\n"],
  "mappings": "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",
  "names": []
}
