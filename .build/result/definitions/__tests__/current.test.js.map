{
  "version": 3,
  "sources": ["../../../../result/definitions/__tests__/current.test.ts"],
  "sourcesContent": ["import configureMeasurements from '../..';\nimport current, { CurrentSystems, CurrentUnits } from '../current';\n\ntest('A to A', () => {\n  const convert = configureMeasurements<\n    'current',\n    CurrentSystems,\n    CurrentUnits\n  >({\n    current,\n  });\n  expect(convert(1).from('A').to('A')).toBe(1);\n});\n\ntest('mA to mA', () => {\n  const convert = configureMeasurements<\n    'current',\n    CurrentSystems,\n    CurrentUnits\n  >({\n    current,\n  });\n  expect(convert(1).from('mA').to('mA')).toBe(1);\n});\n\ntest('kA to kA', () => {\n  const convert = configureMeasurements<\n    'current',\n    CurrentSystems,\n    CurrentUnits\n  >({\n    current,\n  });\n  expect(convert(1).from('kA').to('kA')).toBe(1);\n});\n\ntest('A to mA', () => {\n  const convert = configureMeasurements<\n    'current',\n    CurrentSystems,\n    CurrentUnits\n  >({\n    current,\n  });\n  expect(convert(1).from('A').to('mA')).toBe(1000);\n});\n\ntest('A to kA', () => {\n  const convert = configureMeasurements<\n    'current',\n    CurrentSystems,\n    CurrentUnits\n  >({\n    current,\n  });\n  expect(convert(1).from('A').to('kA')).toBe(0.001);\n});\n\ntest('kA to mA', () => {\n  const convert = configureMeasurements<\n    'current',\n    CurrentSystems,\n    CurrentUnits\n  >({\n    current,\n  });\n  expect(convert(1).from('kA').to('mA')).toBe(1000000);\n});\n\ntest('mA to kA', () => {\n  const convert = configureMeasurements<\n    'current',\n    CurrentSystems,\n    CurrentUnits\n  >({\n    current,\n  });\n  expect(convert(1).from('mA').to('kA')).toBe(0.000001);\n});\n\ntest('mA to A', () => {\n  const convert = configureMeasurements<\n    'current',\n    CurrentSystems,\n    CurrentUnits\n  >({\n    current,\n  });\n  expect(convert(1).from('mA').to('A')).toBe(0.001);\n});\n\ntest('kA to A', () => {\n  const convert = configureMeasurements<\n    'current',\n    CurrentSystems,\n    CurrentUnits\n  >({\n    current,\n  });\n  expect(convert(1).from('kA').to('A')).toBe(1000);\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA,eAAkC;AAClC,qBAAsD;AAEtD,KAAK,UAAU,MAAM;AACnB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,KAAK,GAAG,MAAM,KAAK;AAAA;AAG5C,KAAK,YAAY,MAAM;AACrB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,MAAM,GAAG,OAAO,KAAK;AAAA;AAG9C,KAAK,YAAY,MAAM;AACrB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,MAAM,GAAG,OAAO,KAAK;AAAA;AAG9C,KAAK,WAAW,MAAM;AACpB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,KAAK,GAAG,OAAO,KAAK;AAAA;AAG7C,KAAK,WAAW,MAAM;AACpB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,KAAK,GAAG,OAAO,KAAK;AAAA;AAG7C,KAAK,YAAY,MAAM;AACrB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,MAAM,GAAG,OAAO,KAAK;AAAA;AAG9C,KAAK,YAAY,MAAM;AACrB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,MAAM,GAAG,OAAO,KAAK;AAAA;AAG9C,KAAK,WAAW,MAAM;AACpB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,MAAM,GAAG,MAAM,KAAK;AAAA;AAG7C,KAAK,WAAW,MAAM;AACpB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,MAAM,GAAG,MAAM,KAAK;AAAA;",
  "names": []
}
