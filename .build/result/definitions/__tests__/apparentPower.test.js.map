{
  "version": 3,
  "sources": ["../../../../result/definitions/__tests__/apparentPower.test.ts"],
  "sourcesContent": ["import configureMeasurements from '../..';\nimport apparentPower, {\n  ApparentPowerSystems,\n  ApparentPowerUnits,\n} from '../apparentPower';\n\ntest('VA to VA', () => {\n  const convert = configureMeasurements<\n    'apparentPower',\n    ApparentPowerSystems,\n    ApparentPowerUnits\n  >({\n    apparentPower,\n  });\n  expect(convert(1).from('VA').to('VA')).toBe(1);\n});\n\ntest('mVA to mVA', () => {\n  const convert = configureMeasurements<\n    'apparentPower',\n    ApparentPowerSystems,\n    ApparentPowerUnits\n  >({\n    apparentPower,\n  });\n  expect(convert(1).from('mVA').to('mVA')).toBe(1);\n});\n\ntest('kVA to kVA', () => {\n  const convert = configureMeasurements<\n    'apparentPower',\n    ApparentPowerSystems,\n    ApparentPowerUnits\n  >({\n    apparentPower,\n  });\n  expect(convert(1).from('kVA').to('kVA')).toBe(1);\n});\n\ntest('MVA to MVA', () => {\n  const convert = configureMeasurements<\n    'apparentPower',\n    ApparentPowerSystems,\n    ApparentPowerUnits\n  >({\n    apparentPower,\n  });\n  expect(convert(1).from('MVA').to('MVA')).toBe(1);\n});\n\ntest('GVA to GVA', () => {\n  const convert = configureMeasurements<\n    'apparentPower',\n    ApparentPowerSystems,\n    ApparentPowerUnits\n  >({\n    apparentPower,\n  });\n  expect(convert(1).from('GVA').to('GVA')).toBe(1);\n});\n\ntest('VA to mVA', () => {\n  const convert = configureMeasurements<\n    'apparentPower',\n    ApparentPowerSystems,\n    ApparentPowerUnits\n  >({\n    apparentPower,\n  });\n  expect(convert(1).from('VA').to('mVA')).toBe(1000);\n});\n\ntest('VA to kVA', () => {\n  const convert = configureMeasurements<\n    'apparentPower',\n    ApparentPowerSystems,\n    ApparentPowerUnits\n  >({\n    apparentPower,\n  });\n  expect(convert(1).from('VA').to('kVA')).toBe(0.001);\n});\n\ntest('VA to MVA', () => {\n  const convert = configureMeasurements<\n    'apparentPower',\n    ApparentPowerSystems,\n    ApparentPowerUnits\n  >({\n    apparentPower,\n  });\n  expect(convert(1).from('VA').to('MVA')).toBe(0.000001);\n});\n\ntest('VA to GVA', () => {\n  const convert = configureMeasurements<\n    'apparentPower',\n    ApparentPowerSystems,\n    ApparentPowerUnits\n  >({\n    apparentPower,\n  });\n  expect(convert(1).from('VA').to('GVA')).toBe(0.000000001);\n});\n\ntest('GVA to mVA', () => {\n  const convert = configureMeasurements<\n    'apparentPower',\n    ApparentPowerSystems,\n    ApparentPowerUnits\n  >({\n    apparentPower,\n  });\n  expect(convert(1).from('GVA').to('mVA')).toBe(1000000000000);\n});\n\ntest('MVA to mVA', () => {\n  const convert = configureMeasurements({\n    apparentPower,\n  });\n  expect(convert(1).from('MVA').to('mVA')).toBe(1000000000);\n});\n\ntest('kVA to mVA', () => {\n  const convert = configureMeasurements<\n    'apparentPower',\n    ApparentPowerSystems,\n    ApparentPowerUnits\n  >({\n    apparentPower,\n  });\n  expect(convert(1).from('kVA').to('mVA')).toBe(1000000);\n});\n\ntest('mVA to kVA', () => {\n  const convert = configureMeasurements<\n    'apparentPower',\n    ApparentPowerSystems,\n    ApparentPowerUnits\n  >({\n    apparentPower,\n  });\n  expect(convert(1).from('mVA').to('kVA')).toBe(0.000001);\n});\n\ntest('mVA to VA', () => {\n  const convert = configureMeasurements<\n    'apparentPower',\n    ApparentPowerSystems,\n    ApparentPowerUnits\n  >({\n    apparentPower,\n  });\n  expect(convert(1).from('mVA').to('VA')).toBe(0.001);\n});\n\ntest('kVA to VA', () => {\n  const convert = configureMeasurements<\n    'apparentPower',\n    ApparentPowerSystems,\n    ApparentPowerUnits\n  >({\n    apparentPower,\n  });\n  expect(convert(1).from('kVA').to('VA')).toBe(1000);\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA,eAAkC;AAClC,2BAGO;AAEP,KAAK,YAAY,MAAM;AACrB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,MAAM,GAAG,OAAO,KAAK;AAAA;AAG9C,KAAK,cAAc,MAAM;AACvB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,OAAO,GAAG,QAAQ,KAAK;AAAA;AAGhD,KAAK,cAAc,MAAM;AACvB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,OAAO,GAAG,QAAQ,KAAK;AAAA;AAGhD,KAAK,cAAc,MAAM;AACvB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,OAAO,GAAG,QAAQ,KAAK;AAAA;AAGhD,KAAK,cAAc,MAAM;AACvB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,OAAO,GAAG,QAAQ,KAAK;AAAA;AAGhD,KAAK,aAAa,MAAM;AACtB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,MAAM,GAAG,QAAQ,KAAK;AAAA;AAG/C,KAAK,aAAa,MAAM;AACtB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,MAAM,GAAG,QAAQ,KAAK;AAAA;AAG/C,KAAK,aAAa,MAAM;AACtB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,MAAM,GAAG,QAAQ,KAAK;AAAA;AAG/C,KAAK,aAAa,MAAM;AACtB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,MAAM,GAAG,QAAQ,KAAK;AAAA;AAG/C,KAAK,cAAc,MAAM;AACvB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,OAAO,GAAG,QAAQ,KAAK;AAAA;AAGhD,KAAK,cAAc,MAAM;AACvB,QAAM,UAAU,sBAAsB;AAAA,IACpC;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,OAAO,GAAG,QAAQ,KAAK;AAAA;AAGhD,KAAK,cAAc,MAAM;AACvB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,OAAO,GAAG,QAAQ,KAAK;AAAA;AAGhD,KAAK,cAAc,MAAM;AACvB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,OAAO,GAAG,QAAQ,KAAK;AAAA;AAGhD,KAAK,aAAa,MAAM;AACtB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,OAAO,GAAG,OAAO,KAAK;AAAA;AAG/C,KAAK,aAAa,MAAM;AACtB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,OAAO,GAAG,OAAO,KAAK;AAAA;",
  "names": []
}
