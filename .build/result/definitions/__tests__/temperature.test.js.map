{
  "version": 3,
  "sources": ["../../../../result/definitions/__tests__/temperature.test.ts"],
  "sourcesContent": ["import configureMeasurements from '../..';\nimport temperature, {\n  TemperatureSystems,\n  TemperatureUnits,\n} from '../temperature';\n\ntest('C to K', () => {\n  const convert = configureMeasurements<\n    'temperature',\n    TemperatureSystems,\n    TemperatureUnits\n  >({\n    temperature,\n  });\n  expect(convert(0).from('C').to('K')).toBe(273.15);\n});\n\ntest('K to C', () => {\n  const convert = configureMeasurements<\n    'temperature',\n    TemperatureSystems,\n    TemperatureUnits\n  >({\n    temperature,\n  });\n  expect(convert(273.15).from('K').to('C')).toBe(0);\n});\n\ntest('F to C', () => {\n  const convert = configureMeasurements<\n    'temperature',\n    TemperatureSystems,\n    TemperatureUnits\n  >({\n    temperature,\n  });\n  expect(convert(32).from('F').to('C')).toBe(0);\n});\n\ntest('C to F', () => {\n  const convert = configureMeasurements<\n    'temperature',\n    TemperatureSystems,\n    TemperatureUnits\n  >({\n    temperature,\n  });\n  expect(convert(0).from('C').to('F')).toBe(32);\n});\n\ntest('F to K', () => {\n  const convert = configureMeasurements<\n    'temperature',\n    TemperatureSystems,\n    TemperatureUnits\n  >({\n    temperature,\n  });\n  expect(convert(32).from('F').to('K')).toBe(273.15);\n});\n\ntest('F to R', () => {\n  const convert = configureMeasurements<\n    'temperature',\n    TemperatureSystems,\n    TemperatureUnits\n  >({\n    temperature,\n  });\n  expect(convert(100).from('F').to('R')).toBe(559.6700000000001);\n});\n\ntest('R to F', () => {\n  const convert = configureMeasurements<\n    'temperature',\n    TemperatureSystems,\n    TemperatureUnits\n  >({\n    temperature,\n  });\n  expect(convert(670).from('R').to('F')).toBe(210.32999999999998);\n});\n\ntest('R to C', () => {\n  const convert = configureMeasurements<\n    'temperature',\n    TemperatureSystems,\n    TemperatureUnits\n  >({\n    temperature,\n  });\n  expect(convert(612).from('R').to('C')).toBe(66.85);\n});\n\ntest('R to K', () => {\n  const convert = configureMeasurements<\n    'temperature',\n    TemperatureSystems,\n    TemperatureUnits\n  >({\n    temperature,\n  });\n  expect(convert(459.67).from('R').to('K')).toBe(255.3722222222222);\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA,eAAkC;AAClC,yBAGO;AAEP,KAAK,UAAU,MAAM;AACnB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,KAAK,GAAG,MAAM,KAAK;AAAA;AAG5C,KAAK,UAAU,MAAM;AACnB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,QAAQ,KAAK,KAAK,GAAG,MAAM,KAAK;AAAA;AAGjD,KAAK,UAAU,MAAM;AACnB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,IAAI,KAAK,KAAK,GAAG,MAAM,KAAK;AAAA;AAG7C,KAAK,UAAU,MAAM;AACnB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,KAAK,GAAG,MAAM,KAAK;AAAA;AAG5C,KAAK,UAAU,MAAM;AACnB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,IAAI,KAAK,KAAK,GAAG,MAAM,KAAK;AAAA;AAG7C,KAAK,UAAU,MAAM;AACnB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,KAAK,KAAK,KAAK,GAAG,MAAM,KAAK;AAAA;AAG9C,KAAK,UAAU,MAAM;AACnB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,KAAK,KAAK,KAAK,GAAG,MAAM,KAAK;AAAA;AAG9C,KAAK,UAAU,MAAM;AACnB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,KAAK,KAAK,KAAK,GAAG,MAAM,KAAK;AAAA;AAG9C,KAAK,UAAU,MAAM;AACnB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,QAAQ,KAAK,KAAK,GAAG,MAAM,KAAK;AAAA;",
  "names": []
}
