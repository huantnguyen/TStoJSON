{
  "version": 3,
  "sources": ["../../../../result/definitions/__tests__/time.test.ts"],
  "sourcesContent": ["import configureMeasurements from '../..';\nimport time, { TimeSystems, TimeUnits } from '../time';\n\ntest('s to ns', () => {\n  const convert = configureMeasurements<'time', TimeSystems, TimeUnits>({\n    time,\n  });\n  expect(convert(1).from('s').to('ns')).toBeCloseTo(1000000000);\n});\n\ntest('s to mu', () => {\n  const convert = configureMeasurements<'time', TimeSystems, TimeUnits>({\n    time,\n  });\n  expect(convert(1).from('s').to('mu')).toBe(1000000);\n});\n\ntest('s to ms', () => {\n  const convert = configureMeasurements<'time', TimeSystems, TimeUnits>({\n    time,\n  });\n  expect(convert(1).from('s').to('ms')).toBe(1000);\n});\n\ntest('s to m', () => {\n  const convert = configureMeasurements<'time', TimeSystems, TimeUnits>({\n    time,\n  });\n  expect(convert(60).from('s').to('min')).toBe(1);\n});\n\ntest('s to s', () => {\n  const convert = configureMeasurements<'time', TimeSystems, TimeUnits>({\n    time,\n  });\n  expect(convert(1).from('s').to('s')).toBe(1);\n});\n\ntest('s to h', () => {\n  const convert = configureMeasurements<'time', TimeSystems, TimeUnits>({\n    time,\n  });\n  expect(convert(3600).from('s').to('h')).toBe(1);\n});\n\ntest('s to d', () => {\n  const convert = configureMeasurements<'time', TimeSystems, TimeUnits>({\n    time,\n  });\n  expect(convert(86400).from('s').to('d')).toBe(1);\n});\n\ntest('d to week', () => {\n  const convert = configureMeasurements<'time', TimeSystems, TimeUnits>({\n    time,\n  });\n  expect(convert(7).from('d').to('week')).toBe(1);\n});\n\ntest('d to month', () => {\n  const convert = configureMeasurements<'time', TimeSystems, TimeUnits>({\n    time,\n  });\n  expect(convert(30.4375).from('d').to('month')).toBe(1);\n});\n\ntest('d to year', () => {\n  const convert = configureMeasurements<'time', TimeSystems, TimeUnits>({\n    time,\n  });\n  expect(convert(365.25).from('d').to('year')).toBe(1);\n});\n\ntest('week to month', () => {\n  const convert = configureMeasurements<'time', TimeSystems, TimeUnits>({\n    time,\n  });\n  expect(convert(4.34821).from('week').to('month')).toBeCloseTo(1);\n});\n\ntest('week to year', () => {\n  const convert = configureMeasurements<'time', TimeSystems, TimeUnits>({\n    time,\n  });\n  expect(convert(52.17857).from('week').to('year')).toBeCloseTo(1);\n});\n\ntest('month to year', () => {\n  const convert = configureMeasurements<'time', TimeSystems, TimeUnits>({\n    time,\n  });\n  expect(convert(12).from('month').to('year')).toBe(1);\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA,eAAkC;AAClC,kBAA6C;AAE7C,KAAK,WAAW,MAAM;AACpB,QAAM,UAAU,sBAAsD;AAAA,IACpE;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,KAAK,GAAG,OAAO,YAAY;AAAA;AAGpD,KAAK,WAAW,MAAM;AACpB,QAAM,UAAU,sBAAsD;AAAA,IACpE;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,KAAK,GAAG,OAAO,KAAK;AAAA;AAG7C,KAAK,WAAW,MAAM;AACpB,QAAM,UAAU,sBAAsD;AAAA,IACpE;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,KAAK,GAAG,OAAO,KAAK;AAAA;AAG7C,KAAK,UAAU,MAAM;AACnB,QAAM,UAAU,sBAAsD;AAAA,IACpE;AAAA;AAEF,SAAO,QAAQ,IAAI,KAAK,KAAK,GAAG,QAAQ,KAAK;AAAA;AAG/C,KAAK,UAAU,MAAM;AACnB,QAAM,UAAU,sBAAsD;AAAA,IACpE;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,KAAK,GAAG,MAAM,KAAK;AAAA;AAG5C,KAAK,UAAU,MAAM;AACnB,QAAM,UAAU,sBAAsD;AAAA,IACpE;AAAA;AAEF,SAAO,QAAQ,MAAM,KAAK,KAAK,GAAG,MAAM,KAAK;AAAA;AAG/C,KAAK,UAAU,MAAM;AACnB,QAAM,UAAU,sBAAsD;AAAA,IACpE;AAAA;AAEF,SAAO,QAAQ,OAAO,KAAK,KAAK,GAAG,MAAM,KAAK;AAAA;AAGhD,KAAK,aAAa,MAAM;AACtB,QAAM,UAAU,sBAAsD;AAAA,IACpE;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,KAAK,GAAG,SAAS,KAAK;AAAA;AAG/C,KAAK,cAAc,MAAM;AACvB,QAAM,UAAU,sBAAsD;AAAA,IACpE;AAAA;AAEF,SAAO,QAAQ,SAAS,KAAK,KAAK,GAAG,UAAU,KAAK;AAAA;AAGtD,KAAK,aAAa,MAAM;AACtB,QAAM,UAAU,sBAAsD;AAAA,IACpE;AAAA;AAEF,SAAO,QAAQ,QAAQ,KAAK,KAAK,GAAG,SAAS,KAAK;AAAA;AAGpD,KAAK,iBAAiB,MAAM;AAC1B,QAAM,UAAU,sBAAsD;AAAA,IACpE;AAAA;AAEF,SAAO,QAAQ,SAAS,KAAK,QAAQ,GAAG,UAAU,YAAY;AAAA;AAGhE,KAAK,gBAAgB,MAAM;AACzB,QAAM,UAAU,sBAAsD;AAAA,IACpE;AAAA;AAEF,SAAO,QAAQ,UAAU,KAAK,QAAQ,GAAG,SAAS,YAAY;AAAA;AAGhE,KAAK,iBAAiB,MAAM;AAC1B,QAAM,UAAU,sBAAsD;AAAA,IACpE;AAAA;AAEF,SAAO,QAAQ,IAAI,KAAK,SAAS,GAAG,SAAS,KAAK;AAAA;",
  "names": []
}
