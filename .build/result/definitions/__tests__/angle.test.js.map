{
  "version": 3,
  "sources": ["../../../../result/definitions/__tests__/angle.test.ts"],
  "sourcesContent": ["import configureMeasurements from '../..';\nimport angle, { AngleSystems, AngleUnits } from '../angle';\n\ntest('rad to rad', () => {\n  const convert = configureMeasurements<'angle', AngleSystems, AngleUnits>({\n    angle,\n  });\n  expect(convert(1).from('rad').to('rad')).toBe(1);\n});\n\ntest('deg to deg', () => {\n  const convert = configureMeasurements<'angle', AngleSystems, AngleUnits>({\n    angle,\n  });\n  expect(convert(1).from('deg').to('deg')).toBe(1);\n});\n\ntest('grad to grad', () => {\n  const convert = configureMeasurements<'angle', AngleSystems, AngleUnits>({\n    angle,\n  });\n  expect(convert(1).from('grad').to('grad')).toBe(1);\n});\n\ntest('arcmin to arcmin', () => {\n  const convert = configureMeasurements<'angle', AngleSystems, AngleUnits>({\n    angle,\n  });\n  expect(convert(1).from('arcmin').to('arcmin')).toBe(1);\n});\n\ntest('arcsec to arcsec', () => {\n  const convert = configureMeasurements<'angle', AngleSystems, AngleUnits>({\n    angle,\n  });\n  expect(convert(1).from('arcsec').to('arcsec')).toBe(1);\n});\n\ntest('deg to rad', () => {\n  const convert = configureMeasurements<'angle', AngleSystems, AngleUnits>({\n    angle,\n  });\n  expect(convert(360).from('deg').to('rad')).toBeCloseTo(6.28319);\n});\n\ntest('deg to grad', () => {\n  const convert = configureMeasurements<'angle', AngleSystems, AngleUnits>({\n    angle,\n  });\n  expect(convert(360).from('deg').to('grad')).toBe(400);\n});\n\ntest('deg to arcmin', () => {\n  const convert = configureMeasurements<'angle', AngleSystems, AngleUnits>({\n    angle,\n  });\n  expect(convert(360).from('deg').to('arcmin')).toBe(21600);\n});\n\ntest('deg to arcsec', () => {\n  const convert = configureMeasurements<'angle', AngleSystems, AngleUnits>({\n    angle,\n  });\n  expect(convert(360).from('deg').to('arcsec')).toBe(1.296e6);\n});\n\ntest('rad to grad', () => {\n  const convert = configureMeasurements<'angle', AngleSystems, AngleUnits>({\n    angle,\n  });\n  expect(convert(10).from('rad').to('grad')).toBeCloseTo(636.62);\n});\n\ntest('rad to arcsec', () => {\n  const convert = configureMeasurements<'angle', AngleSystems, AngleUnits>({\n    angle,\n  });\n  expect(convert(10).from('rad').to('arcsec')).toBeCloseTo(2062648.06);\n});\n\ntest('grad to arcmin', () => {\n  const convert = configureMeasurements<'angle', AngleSystems, AngleUnits>({\n    angle,\n  });\n  expect(convert(5).from('grad').to('arcmin')).toBe(270);\n});\n\ntest('grad to deg', () => {\n  const convert = configureMeasurements<'angle', AngleSystems, AngleUnits>({\n    angle,\n  });\n  expect(convert(5).from('grad').to('deg')).toBe(4.5);\n});\n\ntest('arcmin to rad', () => {\n  const convert = configureMeasurements<'angle', AngleSystems, AngleUnits>({\n    angle,\n  });\n  expect(convert(10000).from('arcmin').to('rad')).toBeCloseTo(2.908882);\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA,eAAkC;AAClC,mBAAgD;AAEhD,KAAK,cAAc,MAAM;AACvB,QAAM,UAAU,sBAAyD;AAAA,IACvE;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,OAAO,GAAG,QAAQ,KAAK;AAAA;AAGhD,KAAK,cAAc,MAAM;AACvB,QAAM,UAAU,sBAAyD;AAAA,IACvE;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,OAAO,GAAG,QAAQ,KAAK;AAAA;AAGhD,KAAK,gBAAgB,MAAM;AACzB,QAAM,UAAU,sBAAyD;AAAA,IACvE;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,QAAQ,GAAG,SAAS,KAAK;AAAA;AAGlD,KAAK,oBAAoB,MAAM;AAC7B,QAAM,UAAU,sBAAyD;AAAA,IACvE;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,UAAU,GAAG,WAAW,KAAK;AAAA;AAGtD,KAAK,oBAAoB,MAAM;AAC7B,QAAM,UAAU,sBAAyD;AAAA,IACvE;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,UAAU,GAAG,WAAW,KAAK;AAAA;AAGtD,KAAK,cAAc,MAAM;AACvB,QAAM,UAAU,sBAAyD;AAAA,IACvE;AAAA;AAEF,SAAO,QAAQ,KAAK,KAAK,OAAO,GAAG,QAAQ,YAAY;AAAA;AAGzD,KAAK,eAAe,MAAM;AACxB,QAAM,UAAU,sBAAyD;AAAA,IACvE;AAAA;AAEF,SAAO,QAAQ,KAAK,KAAK,OAAO,GAAG,SAAS,KAAK;AAAA;AAGnD,KAAK,iBAAiB,MAAM;AAC1B,QAAM,UAAU,sBAAyD;AAAA,IACvE;AAAA;AAEF,SAAO,QAAQ,KAAK,KAAK,OAAO,GAAG,WAAW,KAAK;AAAA;AAGrD,KAAK,iBAAiB,MAAM;AAC1B,QAAM,UAAU,sBAAyD;AAAA,IACvE;AAAA;AAEF,SAAO,QAAQ,KAAK,KAAK,OAAO,GAAG,WAAW,KAAK;AAAA;AAGrD,KAAK,eAAe,MAAM;AACxB,QAAM,UAAU,sBAAyD;AAAA,IACvE;AAAA;AAEF,SAAO,QAAQ,IAAI,KAAK,OAAO,GAAG,SAAS,YAAY;AAAA;AAGzD,KAAK,iBAAiB,MAAM;AAC1B,QAAM,UAAU,sBAAyD;AAAA,IACvE;AAAA;AAEF,SAAO,QAAQ,IAAI,KAAK,OAAO,GAAG,WAAW,YAAY;AAAA;AAG3D,KAAK,kBAAkB,MAAM;AAC3B,QAAM,UAAU,sBAAyD;AAAA,IACvE;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,QAAQ,GAAG,WAAW,KAAK;AAAA;AAGpD,KAAK,eAAe,MAAM;AACxB,QAAM,UAAU,sBAAyD;AAAA,IACvE;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,QAAQ,GAAG,QAAQ,KAAK;AAAA;AAGjD,KAAK,iBAAiB,MAAM;AAC1B,QAAM,UAAU,sBAAyD;AAAA,IACvE;AAAA;AAEF,SAAO,QAAQ,KAAO,KAAK,UAAU,GAAG,QAAQ,YAAY;AAAA;",
  "names": []
}
