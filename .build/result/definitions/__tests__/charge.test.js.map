{
  "version": 3,
  "sources": ["../../../../result/definitions/__tests__/charge.test.ts"],
  "sourcesContent": ["import configureMeasurements from '../..';\nimport charge, { ChargeSystems, ChargeUnits } from '../charge';\n\ntest('Co to Co', () => {\n  const convert = configureMeasurements<'charge', ChargeSystems, ChargeUnits>({\n    charge,\n  });\n  expect(convert(1).from('c').to('c')).toBe(1);\n});\n\ntest('Co to mC', () => {\n  const convert = configureMeasurements<'charge', ChargeSystems, ChargeUnits>({\n    charge,\n  });\n  expect(convert(1).from('c').to('mC')).toBe(1000);\n});\n\ntest('mC to Co', () => {\n  const convert = configureMeasurements<'charge', ChargeSystems, ChargeUnits>({\n    charge,\n  });\n  expect(convert(1).from('mC').to('c')).toBe(1 / 1000);\n});\n\ntest('Co to \u03BCC', () => {\n  const convert = configureMeasurements<'charge', ChargeSystems, ChargeUnits>({\n    charge,\n  });\n  expect(convert(1).from('c').to('\u03BCC')).toBe(1000000);\n});\n\ntest('\u03BCC to Co', () => {\n  const convert = configureMeasurements<'charge', ChargeSystems, ChargeUnits>({\n    charge,\n  });\n  expect(convert(1).from('\u03BCC').to('c')).toBe(1 / 1000000);\n});\n\ntest('c to nC', () => {\n  const convert = configureMeasurements<'charge', ChargeSystems, ChargeUnits>({\n    charge,\n  });\n  expect(convert(1).from('c').to('nC')).toBeCloseTo(1e9);\n});\n\ntest('nC to Co', () => {\n  const convert = configureMeasurements<'charge', ChargeSystems, ChargeUnits>({\n    charge,\n  });\n  expect(convert(1).from('nC').to('c')).toBe(1e-9);\n});\n\ntest('Co to pC', () => {\n  const convert = configureMeasurements<'charge', ChargeSystems, ChargeUnits>({\n    charge,\n  });\n  expect(convert(1).from('c').to('pC')).toBe(1e12);\n});\n\ntest('pC to Co', () => {\n  const convert = configureMeasurements<'charge', ChargeSystems, ChargeUnits>({\n    charge,\n  });\n  expect(convert(1).from('pC').to('c')).toBe(1e-12);\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA,eAAkC;AAClC,oBAAmD;AAEnD,KAAK,YAAY,MAAM;AACrB,QAAM,UAAU,sBAA4D;AAAA,IAC1E;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,KAAK,GAAG,MAAM,KAAK;AAAA;AAG5C,KAAK,YAAY,MAAM;AACrB,QAAM,UAAU,sBAA4D;AAAA,IAC1E;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,KAAK,GAAG,OAAO,KAAK;AAAA;AAG7C,KAAK,YAAY,MAAM;AACrB,QAAM,UAAU,sBAA4D;AAAA,IAC1E;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,MAAM,GAAG,MAAM,KAAK,IAAI;AAAA;AAGjD,KAAK,iBAAY,MAAM;AACrB,QAAM,UAAU,sBAA4D;AAAA,IAC1E;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,KAAK,GAAG,YAAO,KAAK;AAAA;AAG7C,KAAK,iBAAY,MAAM;AACrB,QAAM,UAAU,sBAA4D;AAAA,IAC1E;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,WAAM,GAAG,MAAM,KAAK,IAAI;AAAA;AAGjD,KAAK,WAAW,MAAM;AACpB,QAAM,UAAU,sBAA4D;AAAA,IAC1E;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,KAAK,GAAG,OAAO,YAAY;AAAA;AAGpD,KAAK,YAAY,MAAM;AACrB,QAAM,UAAU,sBAA4D;AAAA,IAC1E;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,MAAM,GAAG,MAAM,KAAK;AAAA;AAG7C,KAAK,YAAY,MAAM;AACrB,QAAM,UAAU,sBAA4D;AAAA,IAC1E;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,KAAK,GAAG,OAAO,KAAK;AAAA;AAG7C,KAAK,YAAY,MAAM;AACrB,QAAM,UAAU,sBAA4D;AAAA,IAC1E;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,MAAM,GAAG,MAAM,KAAK;AAAA;",
  "names": []
}
