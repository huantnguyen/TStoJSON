{
  "version": 3,
  "sources": ["../../../../result/definitions/__tests__/volume.test.ts"],
  "sourcesContent": ["import configureMeasurements from '../..';\nimport volume, { VolumeSystems, VolumeUnits } from '../volume';\n\ntest('l to l', () => {\n  const convert = configureMeasurements<'volume', VolumeSystems, VolumeUnits>({\n    volume,\n  });\n  expect(convert(2).from('l').to('l')).toBe(2);\n});\n\ntest('mm3 to l', () => {\n  const convert = configureMeasurements<'volume', VolumeSystems, VolumeUnits>({\n    volume,\n  });\n  expect(convert(1000000).from('mm3').to('l')).toBe(1);\n});\n\ntest('cm3 to l', () => {\n  const convert = configureMeasurements<'volume', VolumeSystems, VolumeUnits>({\n    volume,\n  });\n  expect(convert(100).from('cm3').to('l')).toBe(1 / 10);\n});\n\ntest('dl to l', () => {\n  const convert = configureMeasurements<'volume', VolumeSystems, VolumeUnits>({\n    volume,\n  });\n  expect(convert(2).from('dl').to('l')).toBe(0.2);\n});\n\ntest('cl to l', () => {\n  const convert = configureMeasurements<'volume', VolumeSystems, VolumeUnits>({\n    volume,\n  });\n  expect(convert(25).from('cl').to('l')).toBe(0.25);\n});\n\ntest('ml to l', () => {\n  const convert = configureMeasurements<'volume', VolumeSystems, VolumeUnits>({\n    volume,\n  });\n  expect(convert(100).from('ml').to('l')).toBe(1 / 10);\n});\n\ntest('m3 to l', () => {\n  const convert = configureMeasurements<'volume', VolumeSystems, VolumeUnits>({\n    volume,\n  });\n  expect(convert(1).from('m3').to('l')).toBe(1000);\n});\n\ntest('km3 to l', () => {\n  const convert = configureMeasurements<'volume', VolumeSystems, VolumeUnits>({\n    volume,\n  });\n  expect(convert(1).from('km3').to('l')).toBe(1000000000000);\n});\n\ntest('l to ml', () => {\n  const convert = configureMeasurements<'volume', VolumeSystems, VolumeUnits>({\n    volume,\n  });\n  expect(convert(1).from('l').to('ml')).toBe(1000);\n});\n\ntest('dl to ml', () => {\n  const convert = configureMeasurements<'volume', VolumeSystems, VolumeUnits>({\n    volume,\n  });\n  expect(convert(10).from('dl').to('ml')).toBe(1000);\n});\n\ntest('cl to ml', () => {\n  const convert = configureMeasurements<'volume', VolumeSystems, VolumeUnits>({\n    volume,\n  });\n  expect(convert(100).from('cl').to('ml')).toBe(1000);\n});\n\ntest('ml to ml', () => {\n  const convert = configureMeasurements<'volume', VolumeSystems, VolumeUnits>({\n    volume,\n  });\n  expect(convert(13).from('ml').to('ml')).toBe(13);\n});\n\ntest('msk to ml', () => {\n  const convert = configureMeasurements<'volume', VolumeSystems, VolumeUnits>({\n    volume,\n  });\n  expect(convert(2).from('msk').to('ml')).toBe(30);\n});\n\ntest('tsk to ml', () => {\n  const convert = configureMeasurements<'volume', VolumeSystems, VolumeUnits>({\n    volume,\n  });\n  expect(convert(3).from('tsk').to('ml')).toBe(15);\n});\n\ntest('krm to ml', () => {\n  const convert = configureMeasurements<'volume', VolumeSystems, VolumeUnits>({\n    volume,\n  });\n  expect(convert(13).from('krm').to('ml')).toBe(13);\n});\n\ntest('kanna to l', () => {\n  const convert = configureMeasurements<'volume', VolumeSystems, VolumeUnits>({\n    volume,\n  });\n  expect(convert(2).from('kanna').to('l')).toBe(2 * 2.617);\n});\n\ntest('kkp to ml', () => {\n  const convert = configureMeasurements<'volume', VolumeSystems, VolumeUnits>({\n    volume,\n  });\n  expect(convert(2).from('kkp').to('ml')).toBe(300);\n});\n\ntest('glas to ml', () => {\n  const convert = configureMeasurements<'volume', VolumeSystems, VolumeUnits>({\n    volume,\n  });\n  expect(convert(2).from('glas').to('ml')).toBe(400);\n});\n\ntest('ml to msk', () => {\n  const convert = configureMeasurements<'volume', VolumeSystems, VolumeUnits>({\n    volume,\n  });\n  expect(convert(15).from('ml').to('msk')).toBe(1);\n});\n\ntest('ml to tsk', () => {\n  const convert = configureMeasurements<'volume', VolumeSystems, VolumeUnits>({\n    volume,\n  });\n  expect(convert(5).from('ml').to('tsk')).toBe(1);\n});\n\ntest('ml to krm', () => {\n  const convert = configureMeasurements<'volume', VolumeSystems, VolumeUnits>({\n    volume,\n  });\n  expect(convert(1).from('ml').to('krm')).toBe(1);\n});\n\ntest('l to kanna', () => {\n  const convert = configureMeasurements<'volume', VolumeSystems, VolumeUnits>({\n    volume,\n  });\n  expect(convert(2.617).from('l').to('kanna')).toBe(1);\n});\n\ntest('lm to kkp', () => {\n  const convert = configureMeasurements<'volume', VolumeSystems, VolumeUnits>({\n    volume,\n  });\n  expect(convert(150).from('ml').to('kkp')).toBe(1);\n});\n\ntest('ml to glas', () => {\n  const convert = configureMeasurements<'volume', VolumeSystems, VolumeUnits>({\n    volume,\n  });\n  expect(convert(200).from('ml').to('glas')).toBe(1);\n});\n\ntest('fl-oz to fl-oz', () => {\n  const convert = configureMeasurements<'volume', VolumeSystems, VolumeUnits>({\n    volume,\n  });\n  expect(convert(62).from('fl-oz').to('fl-oz')).toBe(62);\n});\n\ntest('fl-oz to tbsp', () => {\n  const convert = configureMeasurements<'volume', VolumeSystems, VolumeUnits>({\n    volume,\n  });\n  expect(convert(4).from('fl-oz').to('Tbs')).toBe(8);\n});\n\ntest('Tbs to fl-oz', () => {\n  const convert = configureMeasurements<'volume', VolumeSystems, VolumeUnits>({\n    volume,\n  });\n  expect(convert(2).from('Tbs').to('fl-oz')).toBe(1);\n});\n\ntest('Tbs to Tbs', () => {\n  const convert = configureMeasurements<'volume', VolumeSystems, VolumeUnits>({\n    volume,\n  });\n  expect(convert(140).from('Tbs').to('Tbs')).toBe(140);\n});\n\ntest('tsp to l', () => {\n  const convert = configureMeasurements<'volume', VolumeSystems, VolumeUnits>({\n    volume,\n  });\n  expect(convert(355).from('tsp').to('l')).toBeCloseTo(1.74977);\n});\n\ntest('in3 to l', () => {\n  const convert = configureMeasurements<'volume', VolumeSystems, VolumeUnits>({\n    volume,\n  });\n  expect(convert(1).from('in3').to('l')).toBeCloseTo(0.0163871);\n});\n\ntest('in3 to fl-oz', () => {\n  const convert = configureMeasurements<'volume', VolumeSystems, VolumeUnits>({\n    volume,\n  });\n  expect(convert(1).from('in3').to('fl-oz')).toBeCloseTo(0.554113);\n});\n\ntest('m3 to yd3', () => {\n  const convert = configureMeasurements<'volume', VolumeSystems, VolumeUnits>({\n    volume,\n  });\n  expect(convert(1).from('m3').to('yd3')).toBeCloseTo(1.30795);\n});\n\ntest('ft3 to cm3', () => {\n  const convert = configureMeasurements<'volume', VolumeSystems, VolumeUnits>({\n    volume,\n  });\n  expect(convert(1).from('ft3').to('cm3')).toBeCloseTo(28316.832);\n});\n\ntest('pnt to ml', () => {\n  const convert = configureMeasurements<'volume', VolumeSystems, VolumeUnits>({\n    volume,\n  });\n  expect(convert(5).from('pnt').to('ml')).toBeCloseTo(2365.88);\n});\n\ntest('ml to gal', () => {\n  const convert = configureMeasurements<'volume', VolumeSystems, VolumeUnits>({\n    volume,\n  });\n  expect(convert(9876).from('ml').to('gal')).toBeCloseTo(2.609);\n});\n\ntest('gal to l', () => {\n  const convert = configureMeasurements<'volume', VolumeSystems, VolumeUnits>({\n    volume,\n  });\n  expect(convert(10).from('gal').to('l')).toBeCloseTo(37.85);\n});\n\ntest('Ml to Ml', () => {\n  const convert = configureMeasurements<'volume', VolumeSystems, VolumeUnits>({\n    volume,\n  });\n  expect(convert(1).from('Ml').to('Ml')).toBe(1);\n});\n\ntest('Gl to Gl', () => {\n  const convert = configureMeasurements<'volume', VolumeSystems, VolumeUnits>({\n    volume,\n  });\n  expect(convert(2).from('Gl').to('Gl')).toBe(2);\n});\n\ntest('Ml to l', () => {\n  const convert = configureMeasurements<'volume', VolumeSystems, VolumeUnits>({\n    volume,\n  });\n  expect(convert(1).from('Ml').to('l')).toBe(1_000_000);\n});\n\ntest('Gl to l', () => {\n  const convert = configureMeasurements<'volume', VolumeSystems, VolumeUnits>({\n    volume,\n  });\n  expect(convert(1).from('Gl').to('l')).toBe(1_000_000_000);\n});\n\ntest('Gl to Ml', () => {\n  const convert = configureMeasurements<'volume', VolumeSystems, VolumeUnits>({\n    volume,\n  });\n  expect(convert(1).from('Gl').to('Ml')).toBe(1_000);\n});\n\ntest('Ml to Gl', () => {\n  const convert = configureMeasurements<'volume', VolumeSystems, VolumeUnits>({\n    volume,\n  });\n  expect(convert(1).from('Ml').to('Gl')).toBe(0.001);\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA,eAAkC;AAClC,oBAAmD;AAEnD,KAAK,UAAU,MAAM;AACnB,QAAM,UAAU,sBAA4D;AAAA,IAC1E;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,KAAK,GAAG,MAAM,KAAK;AAAA;AAG5C,KAAK,YAAY,MAAM;AACrB,QAAM,UAAU,sBAA4D;AAAA,IAC1E;AAAA;AAEF,SAAO,QAAQ,KAAS,KAAK,OAAO,GAAG,MAAM,KAAK;AAAA;AAGpD,KAAK,YAAY,MAAM;AACrB,QAAM,UAAU,sBAA4D;AAAA,IAC1E;AAAA;AAEF,SAAO,QAAQ,KAAK,KAAK,OAAO,GAAG,MAAM,KAAK,IAAI;AAAA;AAGpD,KAAK,WAAW,MAAM;AACpB,QAAM,UAAU,sBAA4D;AAAA,IAC1E;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,MAAM,GAAG,MAAM,KAAK;AAAA;AAG7C,KAAK,WAAW,MAAM;AACpB,QAAM,UAAU,sBAA4D;AAAA,IAC1E;AAAA;AAEF,SAAO,QAAQ,IAAI,KAAK,MAAM,GAAG,MAAM,KAAK;AAAA;AAG9C,KAAK,WAAW,MAAM;AACpB,QAAM,UAAU,sBAA4D;AAAA,IAC1E;AAAA;AAEF,SAAO,QAAQ,KAAK,KAAK,MAAM,GAAG,MAAM,KAAK,IAAI;AAAA;AAGnD,KAAK,WAAW,MAAM;AACpB,QAAM,UAAU,sBAA4D;AAAA,IAC1E;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,MAAM,GAAG,MAAM,KAAK;AAAA;AAG7C,KAAK,YAAY,MAAM;AACrB,QAAM,UAAU,sBAA4D;AAAA,IAC1E;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,OAAO,GAAG,MAAM,KAAK;AAAA;AAG9C,KAAK,WAAW,MAAM;AACpB,QAAM,UAAU,sBAA4D;AAAA,IAC1E;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,KAAK,GAAG,OAAO,KAAK;AAAA;AAG7C,KAAK,YAAY,MAAM;AACrB,QAAM,UAAU,sBAA4D;AAAA,IAC1E;AAAA;AAEF,SAAO,QAAQ,IAAI,KAAK,MAAM,GAAG,OAAO,KAAK;AAAA;AAG/C,KAAK,YAAY,MAAM;AACrB,QAAM,UAAU,sBAA4D;AAAA,IAC1E;AAAA;AAEF,SAAO,QAAQ,KAAK,KAAK,MAAM,GAAG,OAAO,KAAK;AAAA;AAGhD,KAAK,YAAY,MAAM;AACrB,QAAM,UAAU,sBAA4D;AAAA,IAC1E;AAAA;AAEF,SAAO,QAAQ,IAAI,KAAK,MAAM,GAAG,OAAO,KAAK;AAAA;AAG/C,KAAK,aAAa,MAAM;AACtB,QAAM,UAAU,sBAA4D;AAAA,IAC1E;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,OAAO,GAAG,OAAO,KAAK;AAAA;AAG/C,KAAK,aAAa,MAAM;AACtB,QAAM,UAAU,sBAA4D;AAAA,IAC1E;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,OAAO,GAAG,OAAO,KAAK;AAAA;AAG/C,KAAK,aAAa,MAAM;AACtB,QAAM,UAAU,sBAA4D;AAAA,IAC1E;AAAA;AAEF,SAAO,QAAQ,IAAI,KAAK,OAAO,GAAG,OAAO,KAAK;AAAA;AAGhD,KAAK,cAAc,MAAM;AACvB,QAAM,UAAU,sBAA4D;AAAA,IAC1E;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,SAAS,GAAG,MAAM,KAAK,IAAI;AAAA;AAGpD,KAAK,aAAa,MAAM;AACtB,QAAM,UAAU,sBAA4D;AAAA,IAC1E;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,OAAO,GAAG,OAAO,KAAK;AAAA;AAG/C,KAAK,cAAc,MAAM;AACvB,QAAM,UAAU,sBAA4D;AAAA,IAC1E;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,QAAQ,GAAG,OAAO,KAAK;AAAA;AAGhD,KAAK,aAAa,MAAM;AACtB,QAAM,UAAU,sBAA4D;AAAA,IAC1E;AAAA;AAEF,SAAO,QAAQ,IAAI,KAAK,MAAM,GAAG,QAAQ,KAAK;AAAA;AAGhD,KAAK,aAAa,MAAM;AACtB,QAAM,UAAU,sBAA4D;AAAA,IAC1E;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,MAAM,GAAG,QAAQ,KAAK;AAAA;AAG/C,KAAK,aAAa,MAAM;AACtB,QAAM,UAAU,sBAA4D;AAAA,IAC1E;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,MAAM,GAAG,QAAQ,KAAK;AAAA;AAG/C,KAAK,cAAc,MAAM;AACvB,QAAM,UAAU,sBAA4D;AAAA,IAC1E;AAAA;AAEF,SAAO,QAAQ,OAAO,KAAK,KAAK,GAAG,UAAU,KAAK;AAAA;AAGpD,KAAK,aAAa,MAAM;AACtB,QAAM,UAAU,sBAA4D;AAAA,IAC1E;AAAA;AAEF,SAAO,QAAQ,KAAK,KAAK,MAAM,GAAG,QAAQ,KAAK;AAAA;AAGjD,KAAK,cAAc,MAAM;AACvB,QAAM,UAAU,sBAA4D;AAAA,IAC1E;AAAA;AAEF,SAAO,QAAQ,KAAK,KAAK,MAAM,GAAG,SAAS,KAAK;AAAA;AAGlD,KAAK,kBAAkB,MAAM;AAC3B,QAAM,UAAU,sBAA4D;AAAA,IAC1E;AAAA;AAEF,SAAO,QAAQ,IAAI,KAAK,SAAS,GAAG,UAAU,KAAK;AAAA;AAGrD,KAAK,iBAAiB,MAAM;AAC1B,QAAM,UAAU,sBAA4D;AAAA,IAC1E;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,SAAS,GAAG,QAAQ,KAAK;AAAA;AAGlD,KAAK,gBAAgB,MAAM;AACzB,QAAM,UAAU,sBAA4D;AAAA,IAC1E;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,OAAO,GAAG,UAAU,KAAK;AAAA;AAGlD,KAAK,cAAc,MAAM;AACvB,QAAM,UAAU,sBAA4D;AAAA,IAC1E;AAAA;AAEF,SAAO,QAAQ,KAAK,KAAK,OAAO,GAAG,QAAQ,KAAK;AAAA;AAGlD,KAAK,YAAY,MAAM;AACrB,QAAM,UAAU,sBAA4D;AAAA,IAC1E;AAAA;AAEF,SAAO,QAAQ,KAAK,KAAK,OAAO,GAAG,MAAM,YAAY;AAAA;AAGvD,KAAK,YAAY,MAAM;AACrB,QAAM,UAAU,sBAA4D;AAAA,IAC1E;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,OAAO,GAAG,MAAM,YAAY;AAAA;AAGrD,KAAK,gBAAgB,MAAM;AACzB,QAAM,UAAU,sBAA4D;AAAA,IAC1E;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,OAAO,GAAG,UAAU,YAAY;AAAA;AAGzD,KAAK,aAAa,MAAM;AACtB,QAAM,UAAU,sBAA4D;AAAA,IAC1E;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,MAAM,GAAG,QAAQ,YAAY;AAAA;AAGtD,KAAK,cAAc,MAAM;AACvB,QAAM,UAAU,sBAA4D;AAAA,IAC1E;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,OAAO,GAAG,QAAQ,YAAY;AAAA;AAGvD,KAAK,aAAa,MAAM;AACtB,QAAM,UAAU,sBAA4D;AAAA,IAC1E;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,OAAO,GAAG,OAAO,YAAY;AAAA;AAGtD,KAAK,aAAa,MAAM;AACtB,QAAM,UAAU,sBAA4D;AAAA,IAC1E;AAAA;AAEF,SAAO,QAAQ,MAAM,KAAK,MAAM,GAAG,QAAQ,YAAY;AAAA;AAGzD,KAAK,YAAY,MAAM;AACrB,QAAM,UAAU,sBAA4D;AAAA,IAC1E;AAAA;AAEF,SAAO,QAAQ,IAAI,KAAK,OAAO,GAAG,MAAM,YAAY;AAAA;AAGtD,KAAK,YAAY,MAAM;AACrB,QAAM,UAAU,sBAA4D;AAAA,IAC1E;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,MAAM,GAAG,OAAO,KAAK;AAAA;AAG9C,KAAK,YAAY,MAAM;AACrB,QAAM,UAAU,sBAA4D;AAAA,IAC1E;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,MAAM,GAAG,OAAO,KAAK;AAAA;AAG9C,KAAK,WAAW,MAAM;AACpB,QAAM,UAAU,sBAA4D;AAAA,IAC1E;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,MAAM,GAAG,MAAM,KAAK;AAAA;AAG7C,KAAK,WAAW,MAAM;AACpB,QAAM,UAAU,sBAA4D;AAAA,IAC1E;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,MAAM,GAAG,MAAM,KAAK;AAAA;AAG7C,KAAK,YAAY,MAAM;AACrB,QAAM,UAAU,sBAA4D;AAAA,IAC1E;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,MAAM,GAAG,OAAO,KAAK;AAAA;AAG9C,KAAK,YAAY,MAAM;AACrB,QAAM,UAAU,sBAA4D;AAAA,IAC1E;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,MAAM,GAAG,OAAO,KAAK;AAAA;",
  "names": []
}
