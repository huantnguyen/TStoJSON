{
  "version": 3,
  "sources": ["../../../../result/definitions/__tests__/area.test.ts"],
  "sourcesContent": ["import configureMeasurements from '../..';\nimport area, { AreaSystems, AreaUnits } from '../area';\n\ntest('ft2 to ft2', () => {\n  const convert = configureMeasurements<'area', AreaSystems, AreaUnits>({\n    area,\n  });\n  expect(convert(1).from('ft2').to('ft2')).toBe(1);\n});\n\ntest('ft2 to in2', () => {\n  const convert = configureMeasurements<'area', AreaSystems, AreaUnits>({\n    area,\n  });\n  expect(convert(1).from('ft2').to('in2')).toBe(144);\n});\n\ntest('in2 to ft2', () => {\n  const convert = configureMeasurements<'area', AreaSystems, AreaUnits>({\n    area,\n  });\n  expect(convert(1).from('in2').to('ft2')).toBe(1 / 144);\n});\n\ntest('ft2 to ac', () => {\n  const convert = configureMeasurements<'area', AreaSystems, AreaUnits>({\n    area,\n  });\n  expect(convert(1).from('ft2').to('ac')).toBe(1 / 43560);\n});\n\ntest('ac to ft2', () => {\n  const convert = configureMeasurements<'area', AreaSystems, AreaUnits>({\n    area,\n  });\n  expect(convert(1).from('ac').to('ft2')).toBe(43560);\n});\n\ntest('ft2 to mi2', () => {\n  const convert = configureMeasurements<'area', AreaSystems, AreaUnits>({\n    area,\n  });\n  expect(convert(1).from('ft2').to('mi2')).toBe(1 / 27878400);\n});\n\ntest('mi2 to ft2', () => {\n  const convert = configureMeasurements<'area', AreaSystems, AreaUnits>({\n    area,\n  });\n  expect(convert(1).from('mi2').to('ft2')).toBe(27878400);\n});\n\ntest('m2 to m2', () => {\n  const convert = configureMeasurements<'area', AreaSystems, AreaUnits>({\n    area,\n  });\n  expect(convert(1).from('m2').to('m2')).toBe(1);\n});\n\ntest('m2 to cm2', () => {\n  const convert = configureMeasurements<'area', AreaSystems, AreaUnits>({\n    area,\n  });\n  expect(convert(1).from('m2').to('cm2')).toBe(10000);\n});\n\ntest('cm2 to m2', () => {\n  const convert = configureMeasurements<'area', AreaSystems, AreaUnits>({\n    area,\n  });\n  expect(convert(1).from('cm2').to('m2')).toBe(1 / 10000);\n});\n\ntest('m2 to mm2', () => {\n  const convert = configureMeasurements<'area', AreaSystems, AreaUnits>({\n    area,\n  });\n  expect(convert(1).from('m2').to('mm2')).toBe(1000000);\n});\n\ntest('ha to m2', () => {\n  const convert = configureMeasurements<'area', AreaSystems, AreaUnits>({\n    area,\n  });\n  expect(convert(1).from('ha').to('m2')).toBe(10000);\n});\n\ntest('km2 to m2', () => {\n  const convert = configureMeasurements<'area', AreaSystems, AreaUnits>({\n    area,\n  });\n  expect(convert(1).from('km2').to('m2')).toBe(1000000);\n});\n\ntest('m2 to ft2', () => {\n  const convert = configureMeasurements<'area', AreaSystems, AreaUnits>({\n    area,\n  });\n  expect(convert(1).from('m2').to('ft2')).toBeCloseTo(10.7639);\n});\n\ntest('mm2 to ft2', () => {\n  const convert = configureMeasurements<'area', AreaSystems, AreaUnits>({\n    area,\n  });\n  expect(convert(1).from('mm2').to('ft2')).toBeCloseTo(1.07639e-5);\n});\n\ntest('mm2 to \u03BCm2', () => {\n  const convert = configureMeasurements<'area', AreaSystems, AreaUnits>({\n    area,\n  });\n  expect(convert(1).from('mm2').to('\u03BCm2')).toBe(1e6);\n});\n\ntest('\u03BCm2 to m2', () => {\n  const convert = configureMeasurements<'area', AreaSystems, AreaUnits>({\n    area,\n  });\n  expect(convert(1).from('\u03BCm2').to('m2')).toBe(1e-12);\n});\n\ntest('\u03BCm2 to yd2', () => {\n  const convert = configureMeasurements<'area', AreaSystems, AreaUnits>({\n    area,\n  });\n  expect(convert(1).from('\u03BCm2').to('yd2')).toBeCloseTo(1.196e-12);\n});\n\ntest('mm2 to nm2', () => {\n  const convert = configureMeasurements<'area', AreaSystems, AreaUnits>({\n    area,\n  });\n  expect(convert(1).from('mm2').to('nm2')).toBeCloseTo(1e12);\n});\n\ntest('nm2 to m2', () => {\n  const convert = configureMeasurements<'area', AreaSystems, AreaUnits>({\n    area,\n  });\n  expect(convert(1).from('nm2').to('m2')).toBe(1e-18);\n});\n\ntest('nm2 to yd2', () => {\n  const convert = configureMeasurements<'area', AreaSystems, AreaUnits>({\n    area,\n  });\n  expect(convert(1).from('nm2').to('yd2')).toBeCloseTo(1.196e-18);\n});\n"],
  "mappings": "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",
  "names": []
}
