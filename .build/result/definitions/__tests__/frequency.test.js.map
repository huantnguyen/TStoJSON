{
  "version": 3,
  "sources": ["../../../../result/definitions/__tests__/frequency.test.ts"],
  "sourcesContent": ["import configureMeasurements from '../..';\nimport frequency, { FrequencySystems, FrequencyUnits } from '../frequency';\n\ntest('Hz to Hz', () => {\n  const convert = configureMeasurements<\n    'frequency',\n    FrequencySystems,\n    FrequencyUnits\n  >({\n    frequency,\n  });\n  expect(convert(1).from('Hz').to('Hz')).toBe(1);\n});\n\ntest('mHz to mHz', () => {\n  const convert = configureMeasurements<\n    'frequency',\n    FrequencySystems,\n    FrequencyUnits\n  >({\n    frequency,\n  });\n  expect(convert(1).from('mHz').to('mHz')).toBe(1);\n});\n\ntest('kHz to kHz', () => {\n  const convert = configureMeasurements<\n    'frequency',\n    FrequencySystems,\n    FrequencyUnits\n  >({\n    frequency,\n  });\n  expect(convert(1).from('kHz').to('kHz')).toBe(1);\n});\n\ntest('MHz to MHz', () => {\n  const convert = configureMeasurements<\n    'frequency',\n    FrequencySystems,\n    FrequencyUnits\n  >({\n    frequency,\n  });\n  expect(convert(1).from('MHz').to('MHz')).toBe(1);\n});\n\ntest('GHz to GHz', () => {\n  const convert = configureMeasurements<\n    'frequency',\n    FrequencySystems,\n    FrequencyUnits\n  >({\n    frequency,\n  });\n  expect(convert(1).from('GHz').to('GHz')).toBe(1);\n});\n\ntest('THz to THz', () => {\n  const convert = configureMeasurements<\n    'frequency',\n    FrequencySystems,\n    FrequencyUnits\n  >({\n    frequency,\n  });\n  expect(convert(1).from('THz').to('THz')).toBe(1);\n});\n\ntest('rpm to rpm', () => {\n  const convert = configureMeasurements<\n    'frequency',\n    FrequencySystems,\n    FrequencyUnits\n  >({\n    frequency,\n  });\n  expect(convert(1).from('rpm').to('rpm')).toBe(1);\n});\n\ntest('deg/s to deg/s', () => {\n  const convert = configureMeasurements<\n    'frequency',\n    FrequencySystems,\n    FrequencyUnits\n  >({\n    frequency,\n  });\n  expect(convert(1).from('deg/s').to('deg/s')).toBe(1);\n});\n\ntest('rad/s to rad/s', () => {\n  const convert = configureMeasurements<\n    'frequency',\n    FrequencySystems,\n    FrequencyUnits\n  >({\n    frequency,\n  });\n  expect(convert(1).from('rad/s').to('rad/s')).toBe(1);\n});\n\ntest('rpm to Hz', () => {\n  const convert = configureMeasurements<\n    'frequency',\n    FrequencySystems,\n    FrequencyUnits\n  >({\n    frequency,\n  });\n  expect(convert(60).from('rpm').to('Hz')).toBe(1);\n});\n\ntest('deg/s to Hz', () => {\n  const convert = configureMeasurements<\n    'frequency',\n    FrequencySystems,\n    FrequencyUnits\n  >({\n    frequency,\n  });\n  expect(convert(360).from('deg/s').to('Hz')).toBe(1);\n});\n\ntest('rad/s to Hz', () => {\n  const convert = configureMeasurements<\n    'frequency',\n    FrequencySystems,\n    FrequencyUnits\n  >({\n    frequency,\n  });\n  expect(convert(Math.PI).from('rad/s').to('Hz')).toBe(0.5);\n});\n\ntest('THz to GHz', () => {\n  const convert = configureMeasurements<\n    'frequency',\n    FrequencySystems,\n    FrequencyUnits\n  >({\n    frequency,\n  });\n  expect(convert(1).from('THz').to('GHz')).toBe(1000);\n});\n\ntest('mHz to MHz', () => {\n  const convert = configureMeasurements<\n    'frequency',\n    FrequencySystems,\n    FrequencyUnits\n  >({\n    frequency,\n  });\n  expect(convert(1).from('mHz').to('MHz')).toBe(0.000000001);\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA,eAAkC;AAClC,uBAA4D;AAE5D,KAAK,YAAY,MAAM;AACrB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,MAAM,GAAG,OAAO,KAAK;AAAA;AAG9C,KAAK,cAAc,MAAM;AACvB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,OAAO,GAAG,QAAQ,KAAK;AAAA;AAGhD,KAAK,cAAc,MAAM;AACvB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,OAAO,GAAG,QAAQ,KAAK;AAAA;AAGhD,KAAK,cAAc,MAAM;AACvB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,OAAO,GAAG,QAAQ,KAAK;AAAA;AAGhD,KAAK,cAAc,MAAM;AACvB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,OAAO,GAAG,QAAQ,KAAK;AAAA;AAGhD,KAAK,cAAc,MAAM;AACvB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,OAAO,GAAG,QAAQ,KAAK;AAAA;AAGhD,KAAK,cAAc,MAAM;AACvB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,OAAO,GAAG,QAAQ,KAAK;AAAA;AAGhD,KAAK,kBAAkB,MAAM;AAC3B,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,SAAS,GAAG,UAAU,KAAK;AAAA;AAGpD,KAAK,kBAAkB,MAAM;AAC3B,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,SAAS,GAAG,UAAU,KAAK;AAAA;AAGpD,KAAK,aAAa,MAAM;AACtB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,IAAI,KAAK,OAAO,GAAG,OAAO,KAAK;AAAA;AAGhD,KAAK,eAAe,MAAM;AACxB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,KAAK,KAAK,SAAS,GAAG,OAAO,KAAK;AAAA;AAGnD,KAAK,eAAe,MAAM;AACxB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,KAAK,IAAI,KAAK,SAAS,GAAG,OAAO,KAAK;AAAA;AAGvD,KAAK,cAAc,MAAM;AACvB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,OAAO,GAAG,QAAQ,KAAK;AAAA;AAGhD,KAAK,cAAc,MAAM;AACvB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,OAAO,GAAG,QAAQ,KAAK;AAAA;",
  "names": []
}
