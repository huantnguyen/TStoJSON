{
  "version": 3,
  "sources": ["../../../../result/definitions/__tests__/pieces.test.ts"],
  "sourcesContent": ["import configureMeasurements from '../..';\nimport pieces, { PiecesSystems, PiecesUnits } from '../pieces';\n\ntest('bk-doz to pcs', () => {\n  const convert = configureMeasurements<'pieces', PiecesSystems, PiecesUnits>({\n    pieces,\n  });\n  expect(convert(1).from('bk-doz').to('pcs')).toBe(13);\n});\n\ntest('cp to pcs', () => {\n  const convert = configureMeasurements<'pieces', PiecesSystems, PiecesUnits>({\n    pieces,\n  });\n  expect(convert(1).from('cp').to('pcs')).toBe(2);\n});\n\ntest('doz-doz to pcs', () => {\n  const convert = configureMeasurements<'pieces', PiecesSystems, PiecesUnits>({\n    pieces,\n  });\n  expect(convert(1).from('doz-doz').to('pcs')).toBe(144);\n});\n\ntest('doz to pcs', () => {\n  const convert = configureMeasurements<'pieces', PiecesSystems, PiecesUnits>({\n    pieces,\n  });\n  expect(convert(1).from('doz').to('pcs')).toBe(12);\n});\n\ntest('gr-gr to pcs', () => {\n  const convert = configureMeasurements<'pieces', PiecesSystems, PiecesUnits>({\n    pieces,\n  });\n  expect(convert(1).from('gr-gr').to('pcs')).toBe(1728);\n});\n\ntest('gros to pcs', () => {\n  const convert = configureMeasurements<'pieces', PiecesSystems, PiecesUnits>({\n    pieces,\n  });\n  expect(convert(1).from('gros').to('pcs')).toBe(144);\n});\n\ntest('half-dozen to pcs', () => {\n  const convert = configureMeasurements<'pieces', PiecesSystems, PiecesUnits>({\n    pieces,\n  });\n  expect(convert(1).from('half-dozen').to('pcs')).toBe(6);\n});\n\ntest('long-hundred to pcs', () => {\n  const convert = configureMeasurements<'pieces', PiecesSystems, PiecesUnits>({\n    pieces,\n  });\n  expect(convert(1).from('long-hundred').to('pcs')).toBe(120);\n});\n\ntest('ream to pcs', () => {\n  const convert = configureMeasurements<'pieces', PiecesSystems, PiecesUnits>({\n    pieces,\n  });\n  expect(convert(1).from('ream').to('pcs')).toBe(500);\n});\n\ntest('scores to pcs', () => {\n  const convert = configureMeasurements<'pieces', PiecesSystems, PiecesUnits>({\n    pieces,\n  });\n  expect(convert(1).from('scores').to('pcs')).toBe(20);\n});\n\ntest('sm-gr to pcs', () => {\n  const convert = configureMeasurements<'pieces', PiecesSystems, PiecesUnits>({\n    pieces,\n  });\n  expect(convert(1).from('sm-gr').to('pcs')).toBe(120);\n});\n\ntest('trio to pcs', () => {\n  const convert = configureMeasurements<'pieces', PiecesSystems, PiecesUnits>({\n    pieces,\n  });\n  expect(convert(1).from('trio').to('pcs')).toBe(3);\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA,eAAkC;AAClC,oBAAmD;AAEnD,KAAK,iBAAiB,MAAM;AAC1B,QAAM,UAAU,sBAA4D;AAAA,IAC1E;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,UAAU,GAAG,QAAQ,KAAK;AAAA;AAGnD,KAAK,aAAa,MAAM;AACtB,QAAM,UAAU,sBAA4D;AAAA,IAC1E;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,MAAM,GAAG,QAAQ,KAAK;AAAA;AAG/C,KAAK,kBAAkB,MAAM;AAC3B,QAAM,UAAU,sBAA4D;AAAA,IAC1E;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,WAAW,GAAG,QAAQ,KAAK;AAAA;AAGpD,KAAK,cAAc,MAAM;AACvB,QAAM,UAAU,sBAA4D;AAAA,IAC1E;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,OAAO,GAAG,QAAQ,KAAK;AAAA;AAGhD,KAAK,gBAAgB,MAAM;AACzB,QAAM,UAAU,sBAA4D;AAAA,IAC1E;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,SAAS,GAAG,QAAQ,KAAK;AAAA;AAGlD,KAAK,eAAe,MAAM;AACxB,QAAM,UAAU,sBAA4D;AAAA,IAC1E;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,QAAQ,GAAG,QAAQ,KAAK;AAAA;AAGjD,KAAK,qBAAqB,MAAM;AAC9B,QAAM,UAAU,sBAA4D;AAAA,IAC1E;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,cAAc,GAAG,QAAQ,KAAK;AAAA;AAGvD,KAAK,uBAAuB,MAAM;AAChC,QAAM,UAAU,sBAA4D;AAAA,IAC1E;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,gBAAgB,GAAG,QAAQ,KAAK;AAAA;AAGzD,KAAK,eAAe,MAAM;AACxB,QAAM,UAAU,sBAA4D;AAAA,IAC1E;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,QAAQ,GAAG,QAAQ,KAAK;AAAA;AAGjD,KAAK,iBAAiB,MAAM;AAC1B,QAAM,UAAU,sBAA4D;AAAA,IAC1E;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,UAAU,GAAG,QAAQ,KAAK;AAAA;AAGnD,KAAK,gBAAgB,MAAM;AACzB,QAAM,UAAU,sBAA4D;AAAA,IAC1E;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,SAAS,GAAG,QAAQ,KAAK;AAAA;AAGlD,KAAK,eAAe,MAAM;AACxB,QAAM,UAAU,sBAA4D;AAAA,IAC1E;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,QAAQ,GAAG,QAAQ,KAAK;AAAA;",
  "names": []
}
