{
  "version": 3,
  "sources": ["../../../../result/definitions/__tests__/energy.test.ts"],
  "sourcesContent": ["import configureMeasurements from '../..';\nimport energy, { EnergySystems, EnergyUnits } from '../energy';\n\ntest('Wh to Wh', () => {\n  const convert = configureMeasurements<'energy', EnergySystems, EnergyUnits>({\n    energy,\n  });\n  expect(convert(1).from('Wh').to('Wh')).toBe(1);\n});\n\ntest('mWh to mWh', () => {\n  const convert = configureMeasurements<'energy', EnergySystems, EnergyUnits>({\n    energy,\n  });\n  expect(convert(1).from('mWh').to('mWh')).toBe(1);\n});\n\ntest('kWh to kWh', () => {\n  const convert = configureMeasurements<'energy', EnergySystems, EnergyUnits>({\n    energy,\n  });\n  expect(convert(1).from('kWh').to('kWh')).toBe(1);\n});\n\ntest('MWh to MWh', () => {\n  const convert = configureMeasurements<'energy', EnergySystems, EnergyUnits>({\n    energy,\n  });\n  expect(convert(1).from('MWh').to('MWh')).toBe(1);\n});\n\ntest('GWh to GWh', () => {\n  const convert = configureMeasurements<'energy', EnergySystems, EnergyUnits>({\n    energy,\n  });\n  expect(convert(1).from('GWh').to('GWh')).toBe(1);\n});\n\ntest('J to J', () => {\n  const convert = configureMeasurements<'energy', EnergySystems, EnergyUnits>({\n    energy,\n  });\n  expect(convert(1).from('J').to('J')).toBe(1);\n});\n\ntest('kJ to kJ', () => {\n  const convert = configureMeasurements<'energy', EnergySystems, EnergyUnits>({\n    energy,\n  });\n  expect(convert(1).from('kJ').to('kJ')).toBe(1);\n});\n\ntest('MJ to MJ', () => {\n  const convert = configureMeasurements<'energy', EnergySystems, EnergyUnits>({\n    energy,\n  });\n  expect(convert(1).from('MJ').to('MJ')).toBe(1);\n});\n\ntest('GJ to GJ', () => {\n  const convert = configureMeasurements<'energy', EnergySystems, EnergyUnits>({\n    energy,\n  });\n  expect(convert(1).from('GJ').to('GJ')).toBe(1);\n});\n\ntest('Wh to J', () => {\n  const convert = configureMeasurements<'energy', EnergySystems, EnergyUnits>({\n    energy,\n  });\n  expect(convert(1).from('Wh').to('J')).toBe(3600);\n});\n\ntest('Wh to mWh', () => {\n  const convert = configureMeasurements<'energy', EnergySystems, EnergyUnits>({\n    energy,\n  });\n  expect(convert(1).from('Wh').to('mWh')).toBe(1000);\n});\n\ntest('Wh to kWh', () => {\n  const convert = configureMeasurements<'energy', EnergySystems, EnergyUnits>({\n    energy,\n  });\n  expect(convert(1).from('Wh').to('kWh')).toBe(0.001);\n});\n\ntest('Wh to MWh', () => {\n  const convert = configureMeasurements<'energy', EnergySystems, EnergyUnits>({\n    energy,\n  });\n  expect(convert(1).from('Wh').to('MWh')).toBe(0.000001);\n});\n\ntest('Wh to GWh', () => {\n  const convert = configureMeasurements<'energy', EnergySystems, EnergyUnits>({\n    energy,\n  });\n  expect(convert(1).from('Wh').to('GWh')).toBe(0.000000001);\n});\n\ntest('GWh to mWh', () => {\n  const convert = configureMeasurements<'energy', EnergySystems, EnergyUnits>({\n    energy,\n  });\n  expect(convert(1).from('GWh').to('mWh')).toBe(1000000000000);\n});\n\ntest('GWh to J', () => {\n  const convert = configureMeasurements<'energy', EnergySystems, EnergyUnits>({\n    energy,\n  });\n  expect(convert(1).from('GWh').to('J')).toBe(3600000000000);\n});\n\ntest('MWh to mWh', () => {\n  const convert = configureMeasurements<'energy', EnergySystems, EnergyUnits>({\n    energy,\n  });\n  expect(convert(1).from('MWh').to('mWh')).toBe(1000000000);\n});\n\ntest('kWh to mWh', () => {\n  const convert = configureMeasurements<'energy', EnergySystems, EnergyUnits>({\n    energy,\n  });\n  expect(convert(1).from('kWh').to('mWh')).toBe(1000000);\n});\n\ntest('mWh to kWh', () => {\n  const convert = configureMeasurements<'energy', EnergySystems, EnergyUnits>({\n    energy,\n  });\n  expect(convert(1).from('mWh').to('kWh')).toBe(0.000001);\n});\n\ntest('mWh to Wh', () => {\n  const convert = configureMeasurements<'energy', EnergySystems, EnergyUnits>({\n    energy,\n  });\n  expect(convert(1).from('mWh').to('Wh')).toBe(0.001);\n});\n\ntest('kWh to Wh', () => {\n  const convert = configureMeasurements<'energy', EnergySystems, EnergyUnits>({\n    energy,\n  });\n  expect(convert(1).from('kWh').to('Wh')).toBe(1000);\n});\n\ntest('kWh to kJ', () => {\n  const convert = configureMeasurements<'energy', EnergySystems, EnergyUnits>({\n    energy,\n  });\n  expect(convert(1).from('kWh').to('kJ')).toBe(3600);\n});\n\ntest('MJ to J', () => {\n  const convert = configureMeasurements<'energy', EnergySystems, EnergyUnits>({\n    energy,\n  });\n  expect(convert(1).from('MJ').to('J')).toBe(1_000_000);\n});\n\ntest('GJ to J', () => {\n  const convert = configureMeasurements<'energy', EnergySystems, EnergyUnits>({\n    energy,\n  });\n  expect(convert(1).from('GJ').to('J')).toBe(1_000_000_000);\n});\n\ntest('GJ to MJ', () => {\n  const convert = configureMeasurements<'energy', EnergySystems, EnergyUnits>({\n    energy,\n  });\n  expect(convert(1).from('GJ').to('MJ')).toBe(1_000);\n});\n\ntest('MJ to kJ', () => {\n  const convert = configureMeasurements<'energy', EnergySystems, EnergyUnits>({\n    energy,\n  });\n  expect(convert(1).from('MJ').to('kJ')).toBe(1_000);\n});\n\ntest('MWh to MJ', () => {\n  const convert = configureMeasurements<'energy', EnergySystems, EnergyUnits>({\n    energy,\n  });\n  expect(convert(1).from('MWh').to('MJ')).toBe(3_600);\n});\n\ntest('MWh to GJ', () => {\n  const convert = configureMeasurements<'energy', EnergySystems, EnergyUnits>({\n    energy,\n  });\n  expect(convert(1).from('MWh').to('GJ')).toBe(3.6);\n});\n"],
  "mappings": "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",
  "names": []
}
