{
  "version": 3,
  "sources": ["../../../../result/definitions/__tests__/voltage.test.ts"],
  "sourcesContent": ["import configureMeasurements from '../..';\nimport voltage, { VoltageSystems, VoltageUnits } from '../voltage';\n\ntest('V to V', () => {\n  const convert = configureMeasurements<\n    'voltage',\n    VoltageSystems,\n    VoltageUnits\n  >({\n    voltage,\n  });\n  expect(convert(1).from('V').to('V')).toBe(1);\n});\n\ntest('mV to mV', () => {\n  const convert = configureMeasurements<\n    'voltage',\n    VoltageSystems,\n    VoltageUnits\n  >({\n    voltage,\n  });\n  expect(convert(1).from('mV').to('mV')).toBe(1);\n});\n\ntest('kV to kV', () => {\n  const convert = configureMeasurements<\n    'voltage',\n    VoltageSystems,\n    VoltageUnits\n  >({\n    voltage,\n  });\n  expect(convert(1).from('kV').to('kV')).toBe(1);\n});\n\ntest('V to mV', () => {\n  const convert = configureMeasurements<\n    'voltage',\n    VoltageSystems,\n    VoltageUnits\n  >({\n    voltage,\n  });\n  expect(convert(1).from('V').to('mV')).toBe(1000);\n});\n\ntest('V to kV', () => {\n  const convert = configureMeasurements<\n    'voltage',\n    VoltageSystems,\n    VoltageUnits\n  >({\n    voltage,\n  });\n  expect(convert(1).from('V').to('kV')).toBe(0.001);\n});\n\ntest('kV to mV', () => {\n  const convert = configureMeasurements<\n    'voltage',\n    VoltageSystems,\n    VoltageUnits\n  >({\n    voltage,\n  });\n  expect(convert(1).from('kV').to('mV')).toBe(1000000);\n});\n\ntest('mV to kV', () => {\n  const convert = configureMeasurements<\n    'voltage',\n    VoltageSystems,\n    VoltageUnits\n  >({\n    voltage,\n  });\n  expect(convert(1).from('mV').to('kV')).toBe(0.000001);\n});\n\ntest('mV to V', () => {\n  const convert = configureMeasurements<\n    'voltage',\n    VoltageSystems,\n    VoltageUnits\n  >({\n    voltage,\n  });\n  expect(convert(1).from('mV').to('V')).toBe(0.001);\n});\n\ntest('kV to V', () => {\n  const convert = configureMeasurements<\n    'voltage',\n    VoltageSystems,\n    VoltageUnits\n  >({\n    voltage,\n  });\n  expect(convert(1).from('kV').to('V')).toBe(1000);\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA,eAAkC;AAClC,qBAAsD;AAEtD,KAAK,UAAU,MAAM;AACnB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,KAAK,GAAG,MAAM,KAAK;AAAA;AAG5C,KAAK,YAAY,MAAM;AACrB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,MAAM,GAAG,OAAO,KAAK;AAAA;AAG9C,KAAK,YAAY,MAAM;AACrB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,MAAM,GAAG,OAAO,KAAK;AAAA;AAG9C,KAAK,WAAW,MAAM;AACpB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,KAAK,GAAG,OAAO,KAAK;AAAA;AAG7C,KAAK,WAAW,MAAM;AACpB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,KAAK,GAAG,OAAO,KAAK;AAAA;AAG7C,KAAK,YAAY,MAAM;AACrB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,MAAM,GAAG,OAAO,KAAK;AAAA;AAG9C,KAAK,YAAY,MAAM;AACrB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,MAAM,GAAG,OAAO,KAAK;AAAA;AAG9C,KAAK,WAAW,MAAM;AACpB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,MAAM,GAAG,MAAM,KAAK;AAAA;AAG7C,KAAK,WAAW,MAAM;AACpB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,MAAM,GAAG,MAAM,KAAK;AAAA;",
  "names": []
}
