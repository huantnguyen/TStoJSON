{
  "version": 3,
  "sources": ["../../../../result/definitions/__tests__/partsPer.test.ts"],
  "sourcesContent": ["import configureMeasurements from '../..';\nimport partsPer, { PartsPerSystems, PartsPerUnits } from '../partsPer';\n\ntest('ppm to ppm', () => {\n  const convert = configureMeasurements<\n    'partsPer',\n    PartsPerSystems,\n    PartsPerUnits\n  >({\n    partsPer,\n  });\n  expect(convert(1).from('ppm').to('ppm')).toBe(1);\n});\n\ntest('ppb to ppb', () => {\n  const convert = configureMeasurements<\n    'partsPer',\n    PartsPerSystems,\n    PartsPerUnits\n  >({\n    partsPer,\n  });\n  expect(convert(1).from('ppb').to('ppb')).toBe(1);\n});\n\ntest('ppm to ppb', () => {\n  const convert = configureMeasurements<\n    'partsPer',\n    PartsPerSystems,\n    PartsPerUnits\n  >({\n    partsPer,\n  });\n  expect(convert(1).from('ppm').to('ppb')).toBe(1000);\n});\n\ntest('ppb to ppm', () => {\n  const convert = configureMeasurements<\n    'partsPer',\n    PartsPerSystems,\n    PartsPerUnits\n  >({\n    partsPer,\n  });\n  expect(convert(1).from('ppb').to('ppm')).toBe(0.001);\n});\n\ntest('ppt to ppt', () => {\n  const convert = configureMeasurements<\n    'partsPer',\n    PartsPerSystems,\n    PartsPerUnits\n  >({\n    partsPer,\n  });\n  expect(convert(1).from('ppt').to('ppt')).toBe(1);\n});\n\ntest('ppm to ppt', () => {\n  const convert = configureMeasurements<\n    'partsPer',\n    PartsPerSystems,\n    PartsPerUnits\n  >({\n    partsPer,\n  });\n  expect(convert(1).from('ppm').to('ppt')).toBe(1000000);\n});\n\ntest('ppt to ppb', () => {\n  const convert = configureMeasurements<\n    'partsPer',\n    PartsPerSystems,\n    PartsPerUnits\n  >({\n    partsPer,\n  });\n  expect(convert(1).from('ppt').to('ppb')).toBe(0.001);\n});\n\ntest('ppt to ppm', () => {\n  const convert = configureMeasurements<\n    'partsPer',\n    PartsPerSystems,\n    PartsPerUnits\n  >({\n    partsPer,\n  });\n  expect(convert(1).from('ppt').to('ppm')).toBe(0.000001);\n});\n\ntest('ppq to ppq', () => {\n  const convert = configureMeasurements<\n    'partsPer',\n    PartsPerSystems,\n    PartsPerUnits\n  >({\n    partsPer,\n  });\n  expect(convert(1).from('ppq').to('ppq')).toBe(1);\n});\n\ntest('ppq to ppt', () => {\n  const convert = configureMeasurements<\n    'partsPer',\n    PartsPerSystems,\n    PartsPerUnits\n  >({\n    partsPer,\n  });\n  expect(convert(1).from('ppq').to('ppt')).toBe(0.001);\n});\n\ntest('ppq to ppm', () => {\n  const convert = configureMeasurements<\n    'partsPer',\n    PartsPerSystems,\n    PartsPerUnits\n  >({\n    partsPer,\n  });\n  expect(convert(1).from('ppq').to('ppm')).toBe(0.000000001);\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA,eAAkC;AAClC,sBAAyD;AAEzD,KAAK,cAAc,MAAM;AACvB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,OAAO,GAAG,QAAQ,KAAK;AAAA;AAGhD,KAAK,cAAc,MAAM;AACvB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,OAAO,GAAG,QAAQ,KAAK;AAAA;AAGhD,KAAK,cAAc,MAAM;AACvB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,OAAO,GAAG,QAAQ,KAAK;AAAA;AAGhD,KAAK,cAAc,MAAM;AACvB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,OAAO,GAAG,QAAQ,KAAK;AAAA;AAGhD,KAAK,cAAc,MAAM;AACvB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,OAAO,GAAG,QAAQ,KAAK;AAAA;AAGhD,KAAK,cAAc,MAAM;AACvB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,OAAO,GAAG,QAAQ,KAAK;AAAA;AAGhD,KAAK,cAAc,MAAM;AACvB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,OAAO,GAAG,QAAQ,KAAK;AAAA;AAGhD,KAAK,cAAc,MAAM;AACvB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,OAAO,GAAG,QAAQ,KAAK;AAAA;AAGhD,KAAK,cAAc,MAAM;AACvB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,OAAO,GAAG,QAAQ,KAAK;AAAA;AAGhD,KAAK,cAAc,MAAM;AACvB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,OAAO,GAAG,QAAQ,KAAK;AAAA;AAGhD,KAAK,cAAc,MAAM;AACvB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,OAAO,GAAG,QAAQ,KAAK;AAAA;",
  "names": []
}
