{
  "version": 3,
  "sources": ["../../../../result/definitions/__tests__/reactivePower.test.ts"],
  "sourcesContent": ["import configureMeasurements from '../..';\nimport reactivePower, {\n  ReactivePowerSystems,\n  ReactivePowerUnits,\n} from '../reactivePower';\n\ntest('VAR to VAR', () => {\n  const convert = configureMeasurements<\n    'reactivePower',\n    ReactivePowerSystems,\n    ReactivePowerUnits\n  >({\n    reactivePower,\n  });\n  expect(convert(1).from('VAR').to('VAR')).toBe(1);\n});\n\ntest('mVAR to mVAR', () => {\n  const convert = configureMeasurements<\n    'reactivePower',\n    ReactivePowerSystems,\n    ReactivePowerUnits\n  >({\n    reactivePower,\n  });\n  expect(convert(1).from('mVAR').to('mVAR')).toBe(1);\n});\n\ntest('kVAR to kVAR', () => {\n  const convert = configureMeasurements<\n    'reactivePower',\n    ReactivePowerSystems,\n    ReactivePowerUnits\n  >({\n    reactivePower,\n  });\n  expect(convert(1).from('kVAR').to('kVAR')).toBe(1);\n});\n\ntest('MVAR to MVAR', () => {\n  const convert = configureMeasurements<\n    'reactivePower',\n    ReactivePowerSystems,\n    ReactivePowerUnits\n  >({\n    reactivePower,\n  });\n  expect(convert(1).from('MVAR').to('MVAR')).toBe(1);\n});\n\ntest('GVAR to GVAR', () => {\n  const convert = configureMeasurements<\n    'reactivePower',\n    ReactivePowerSystems,\n    ReactivePowerUnits\n  >({\n    reactivePower,\n  });\n  expect(convert(1).from('GVAR').to('GVAR')).toBe(1);\n});\n\ntest('VAR to mVAR', () => {\n  const convert = configureMeasurements<\n    'reactivePower',\n    ReactivePowerSystems,\n    ReactivePowerUnits\n  >({\n    reactivePower,\n  });\n  expect(convert(1).from('VAR').to('mVAR')).toBe(1000);\n});\n\ntest('VAR to kVAR', () => {\n  const convert = configureMeasurements<\n    'reactivePower',\n    ReactivePowerSystems,\n    ReactivePowerUnits\n  >({\n    reactivePower,\n  });\n  expect(convert(1).from('VAR').to('kVAR')).toBe(0.001);\n});\n\ntest('VAR to MVAR', () => {\n  const convert = configureMeasurements<\n    'reactivePower',\n    ReactivePowerSystems,\n    ReactivePowerUnits\n  >({\n    reactivePower,\n  });\n  expect(convert(1).from('VAR').to('MVAR')).toBe(0.000001);\n});\n\ntest('VAR to GVAR', () => {\n  const convert = configureMeasurements<\n    'reactivePower',\n    ReactivePowerSystems,\n    ReactivePowerUnits\n  >({\n    reactivePower,\n  });\n  expect(convert(1).from('VAR').to('GVAR')).toBe(0.000000001);\n});\n\ntest('GVAR to mVAR', () => {\n  const convert = configureMeasurements<\n    'reactivePower',\n    ReactivePowerSystems,\n    ReactivePowerUnits\n  >({\n    reactivePower,\n  });\n  expect(convert(1).from('GVAR').to('mVAR')).toBe(1000000000000);\n});\n\ntest('MVAR to mVAR', () => {\n  const convert = configureMeasurements<\n    'reactivePower',\n    ReactivePowerSystems,\n    ReactivePowerUnits\n  >({\n    reactivePower,\n  });\n  expect(convert(1).from('MVAR').to('mVAR')).toBe(1000000000);\n});\n\ntest('kVAR to mVAR', () => {\n  const convert = configureMeasurements<\n    'reactivePower',\n    ReactivePowerSystems,\n    ReactivePowerUnits\n  >({\n    reactivePower,\n  });\n  expect(convert(1).from('kVAR').to('mVAR')).toBe(1000000);\n});\n\ntest('mVAR to kVAR', () => {\n  const convert = configureMeasurements<\n    'reactivePower',\n    ReactivePowerSystems,\n    ReactivePowerUnits\n  >({\n    reactivePower,\n  });\n  expect(convert(1).from('mVAR').to('kVAR')).toBe(0.000001);\n});\n\ntest('mVAR to VAR', () => {\n  const convert = configureMeasurements<\n    'reactivePower',\n    ReactivePowerSystems,\n    ReactivePowerUnits\n  >({\n    reactivePower,\n  });\n  expect(convert(1).from('mVAR').to('VAR')).toBe(0.001);\n});\n\ntest('kVAR to VAR', () => {\n  const convert = configureMeasurements<\n    'reactivePower',\n    ReactivePowerSystems,\n    ReactivePowerUnits\n  >({\n    reactivePower,\n  });\n  expect(convert(1).from('kVAR').to('VAR')).toBe(1000);\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA,eAAkC;AAClC,2BAGO;AAEP,KAAK,cAAc,MAAM;AACvB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,OAAO,GAAG,QAAQ,KAAK;AAAA;AAGhD,KAAK,gBAAgB,MAAM;AACzB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,QAAQ,GAAG,SAAS,KAAK;AAAA;AAGlD,KAAK,gBAAgB,MAAM;AACzB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,QAAQ,GAAG,SAAS,KAAK;AAAA;AAGlD,KAAK,gBAAgB,MAAM;AACzB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,QAAQ,GAAG,SAAS,KAAK;AAAA;AAGlD,KAAK,gBAAgB,MAAM;AACzB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,QAAQ,GAAG,SAAS,KAAK;AAAA;AAGlD,KAAK,eAAe,MAAM;AACxB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,OAAO,GAAG,SAAS,KAAK;AAAA;AAGjD,KAAK,eAAe,MAAM;AACxB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,OAAO,GAAG,SAAS,KAAK;AAAA;AAGjD,KAAK,eAAe,MAAM;AACxB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,OAAO,GAAG,SAAS,KAAK;AAAA;AAGjD,KAAK,eAAe,MAAM;AACxB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,OAAO,GAAG,SAAS,KAAK;AAAA;AAGjD,KAAK,gBAAgB,MAAM;AACzB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,QAAQ,GAAG,SAAS,KAAK;AAAA;AAGlD,KAAK,gBAAgB,MAAM;AACzB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,QAAQ,GAAG,SAAS,KAAK;AAAA;AAGlD,KAAK,gBAAgB,MAAM;AACzB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,QAAQ,GAAG,SAAS,KAAK;AAAA;AAGlD,KAAK,gBAAgB,MAAM;AACzB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,QAAQ,GAAG,SAAS,KAAK;AAAA;AAGlD,KAAK,eAAe,MAAM;AACxB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,QAAQ,GAAG,QAAQ,KAAK;AAAA;AAGjD,KAAK,eAAe,MAAM;AACxB,QAAM,UAAU,sBAId;AAAA,IACA;AAAA;AAEF,SAAO,QAAQ,GAAG,KAAK,QAAQ,GAAG,QAAQ,KAAK;AAAA;",
  "names": []
}
