{
  "version": 3,
  "sources": ["../../../../result/definitions/__tests__/power.test.ts"],
  "sourcesContent": ["import configureMeasurements from '../..';\nimport power, { PowerSystems, PowerUnits } from '../power';\n\ntest('W to W', () => {\n  const convert = configureMeasurements<'power', PowerSystems, PowerUnits>({\n    power,\n  });\n  expect(convert(1).from('W').to('W')).toBe(1);\n});\n\ntest('mW to mW', () => {\n  const convert = configureMeasurements<'power', PowerSystems, PowerUnits>({\n    power,\n  });\n  expect(convert(1).from('mW').to('mW')).toBe(1);\n});\n\ntest('kW to kW', () => {\n  const convert = configureMeasurements<'power', PowerSystems, PowerUnits>({\n    power,\n  });\n  expect(convert(1).from('kW').to('kW')).toBe(1);\n});\n\ntest('MW to MW', () => {\n  const convert = configureMeasurements<'power', PowerSystems, PowerUnits>({\n    power,\n  });\n  expect(convert(1).from('MW').to('MW')).toBe(1);\n});\n\ntest('GW to GW', () => {\n  const convert = configureMeasurements<'power', PowerSystems, PowerUnits>({\n    power,\n  });\n  expect(convert(1).from('GW').to('GW')).toBe(1);\n});\n\ntest('PS to PS', () => {\n  const convert = configureMeasurements<'power', PowerSystems, PowerUnits>({\n    power,\n  });\n  expect(convert(1).from('PS').to('PS')).toBe(1);\n});\n\ntest('Btu/s to Btu/s', () => {\n  const convert = configureMeasurements<'power', PowerSystems, PowerUnits>({\n    power,\n  });\n  expect(convert(1).from('Btu/s').to('Btu/s')).toBe(1);\n});\n\ntest('ft-lb/s to ft-lb/s', () => {\n  const convert = configureMeasurements<'power', PowerSystems, PowerUnits>({\n    power,\n  });\n  expect(convert(1).from('ft-lb/s').to('ft-lb/s')).toBe(1);\n});\n\ntest('hp to hp', () => {\n  const convert = configureMeasurements<'power', PowerSystems, PowerUnits>({\n    power,\n  });\n  expect(convert(1).from('hp').to('hp')).toBe(1);\n});\n\ntest('W to mW', () => {\n  const convert = configureMeasurements<'power', PowerSystems, PowerUnits>({\n    power,\n  });\n  expect(convert(1).from('W').to('mW')).toBe(1000);\n});\n\ntest('W to kW', () => {\n  const convert = configureMeasurements<'power', PowerSystems, PowerUnits>({\n    power,\n  });\n  expect(convert(1).from('W').to('kW')).toBe(0.001);\n});\n\ntest('W to MW', () => {\n  const convert = configureMeasurements<'power', PowerSystems, PowerUnits>({\n    power,\n  });\n  expect(convert(1).from('W').to('MW')).toBe(0.000001);\n});\n\ntest('W to GW', () => {\n  const convert = configureMeasurements<'power', PowerSystems, PowerUnits>({\n    power,\n  });\n  expect(convert(1).from('W').to('GW')).toBe(0.000000001);\n});\n\ntest('GW to mW', () => {\n  const convert = configureMeasurements<'power', PowerSystems, PowerUnits>({\n    power,\n  });\n  expect(convert(1).from('GW').to('mW')).toBe(1000000000000);\n});\n\ntest('MW to mW', () => {\n  const convert = configureMeasurements<'power', PowerSystems, PowerUnits>({\n    power,\n  });\n  expect(convert(1).from('MW').to('mW')).toBe(1000000000);\n});\n\ntest('kW to mW', () => {\n  const convert = configureMeasurements<'power', PowerSystems, PowerUnits>({\n    power,\n  });\n  expect(convert(1).from('kW').to('mW')).toBe(1000000);\n});\n\ntest('mW to kW', () => {\n  const convert = configureMeasurements<'power', PowerSystems, PowerUnits>({\n    power,\n  });\n  expect(convert(1).from('mW').to('kW')).toBe(0.000001);\n});\n\ntest('mW to W', () => {\n  const convert = configureMeasurements<'power', PowerSystems, PowerUnits>({\n    power,\n  });\n  expect(convert(1).from('mW').to('W')).toBe(0.001);\n});\n\ntest('kW to W', () => {\n  const convert = configureMeasurements<'power', PowerSystems, PowerUnits>({\n    power,\n  });\n  expect(convert(1).from('kW').to('W')).toBe(1000);\n});\n\ntest('PS to W', () => {\n  const convert = configureMeasurements<'power', PowerSystems, PowerUnits>({\n    power,\n  });\n  expect(convert(1).from('PS').to('W')).toBe(735.49875);\n});\n\ntest('hp to ft-lb/s', () => {\n  const convert = configureMeasurements<'power', PowerSystems, PowerUnits>({\n    power,\n  });\n  expect(convert(1).from('hp').to('ft-lb/s')).toBe(550);\n});\n\ntest('Btu/s to ft-lb/s', () => {\n  const convert = configureMeasurements<'power', PowerSystems, PowerUnits>({\n    power,\n  });\n  expect(convert(1).from('Btu/s').to('ft-lb/s')).toBe(778.16937);\n});\n"],
  "mappings": "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",
  "names": []
}
