{
  "version": 3,
  "sources": ["../index.ts"],
  "sourcesContent": ["/*declare var require: any\nconst tsj = require(\"ts-to-json\");\nconst fs = require(\"fs\");\n\nconst config = {\n    path: \"./result/temperature.ts\",\n    tsconfig: \"tsconfig.json\",\n    type: \"*\", // Or <type-name> if you want to generate schema for that one type only\n    expose: \"export\",\n    jsDoc: \"extended\",\n    topRef: true,\n};\n\nconst output_path = \"new_file\";\n\nconst schema = tsj.createGenerator(config).createSchema(config.type);\nconst schemaString = JSON.stringify(schema, null, 2);\nfs.writeFile(output_path, schemaString, (err: any) => {\n    if (err) throw err;\n});\n*/\n\nconst fs = require('fs');\n\n\nimport { Measure, Unit } from './result/index';\nexport type TemperatureUnits =\n  | TemperatureMetricUnits\n  | TemperatureImperialUnits;\nexport type TemperatureSystems = 'metric' | 'imperial';\n\nexport type TemperatureMetricUnits = 'C' | 'K';\nexport type TemperatureImperialUnits = 'F' | 'R';\n\nconst metric: Record<TemperatureMetricUnits, Unit> = {\n  C: {\n    name: {\n      singular: 'degree Celsius',\n      plural: 'degrees Celsius',\n    },\n    to_anchor: 1,\n    anchor_shift: 0,\n  },\n  K: {\n    name: {\n      singular: 'degree Kelvin',\n      plural: 'degrees Kelvin',\n    },\n    to_anchor: 1,\n    anchor_shift: 273.15,\n  },\n};\n\nconst imperial: Record<TemperatureImperialUnits, Unit> = {\n  F: {\n    name: {\n      singular: 'degree Fahrenheit',\n      plural: 'degrees Fahrenheit',\n    },\n    to_anchor: 1,\n  },\n  R: {\n    name: {\n      singular: 'degree Rankine',\n      plural: 'degrees Rankine',\n    },\n    to_anchor: 1,\n    anchor_shift: 459.67,\n  },\n};\n\nconst measure: Measure<TemperatureSystems, TemperatureUnits> = {\n  systems: {\n    metric,\n    imperial,\n  },\n  anchors: {\n    metric: {\n      imperial: {\n        transform: function (C: number): number {\n          return C / (5 / 9) + 32;\n        },\n      },\n    },\n    imperial: {\n      metric: {\n        transform: function (F: number): number {\n          return (F - 32) * (5 / 9);\n        },\n      },\n    },\n  },\n};\n\nexport default measure;\n\n\n// convert JSON object to string\n//const data = JSON.stringify(metric, null, 4);\n//const data1 = JSON.stringify(imperial, null, 4);\n//const data2 = JSON.stringify(measure, null, 4);\n//const data3 = data.concat(' ', data1);\n//const data4 = data3.concat(' ', data2)\nconst data = JSON.stringify(measure, null, 4);\nconsole.log(data)\n//console.log(data);\n\n// write JSON string to a file\nfs.writeFile('user.json', data, (err) => {\n    if (err) {\n        throw err;\n    }\n    console.log(\"JSON data is saved.\");\n});\n"],
  "mappings": ";;;;;;;AAAA;AAAA;AAAA;AAsBA,MAAM,KAAK,QAAQ;AAYnB,MAAM,SAA+C;AAAA,EACnD,GAAG;AAAA,IACD,MAAM;AAAA,MACJ,UAAU;AAAA,MACV,QAAQ;AAAA;AAAA,IAEV,WAAW;AAAA,IACX,cAAc;AAAA;AAAA,EAEhB,GAAG;AAAA,IACD,MAAM;AAAA,MACJ,UAAU;AAAA,MACV,QAAQ;AAAA;AAAA,IAEV,WAAW;AAAA,IACX,cAAc;AAAA;AAAA;AAIlB,MAAM,WAAmD;AAAA,EACvD,GAAG;AAAA,IACD,MAAM;AAAA,MACJ,UAAU;AAAA,MACV,QAAQ;AAAA;AAAA,IAEV,WAAW;AAAA;AAAA,EAEb,GAAG;AAAA,IACD,MAAM;AAAA,MACJ,UAAU;AAAA,MACV,QAAQ;AAAA;AAAA,IAEV,WAAW;AAAA,IACX,cAAc;AAAA;AAAA;AAIlB,MAAM,UAAyD;AAAA,EAC7D,SAAS;AAAA,IACP;AAAA,IACA;AAAA;AAAA,EAEF,SAAS;AAAA,IACP,QAAQ;AAAA,MACN,UAAU;AAAA,QACR,WAAW,SAAU,GAAmB;AACtC,iBAAO,IAAK,KAAI,KAAK;AAAA;AAAA;AAAA;AAAA,IAI3B,UAAU;AAAA,MACR,QAAQ;AAAA,QACN,WAAW,SAAU,GAAmB;AACtC,iBAAQ,KAAI,MAAO,KAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAOjC,IAAO,eAAQ;AASf,MAAM,OAAO,KAAK,UAAU,SAAS,MAAM;AAC3C,QAAQ,IAAI;AAIZ,GAAG,UAAU,aAAa,MAAM,CAAC,QAAQ;AACrC,MAAI,KAAK;AACL,UAAM;AAAA;AAEV,UAAQ,IAAI;AAAA;",
  "names": []
}
