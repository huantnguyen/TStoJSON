"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isMemberOfFunctionParameter = exports.isParameterOrMemberOfParameter = void 0;
const ts = __importStar(require("typescript"));
const LiteralType_1 = require("../Type/LiteralType");
function isMember(node) {
    if (ts.isParameter(node))
        return true;
    if (node.parent) {
        return isMember(node.parent);
    }
    return false;
}
function isParameterOrMemberOfParameter(context) {
    if (context.isParameter)
        return true;
    const parentContext = context.getParentContext();
    if (parentContext) {
        return isParameterOrMemberOfParameter(parentContext);
    }
    return false;
}
exports.isParameterOrMemberOfParameter = isParameterOrMemberOfParameter;
const isMemberOfFunctionParameter = (node, context) => {
    if (!node || node instanceof LiteralType_1.LiteralType)
        return false;
    if (isMember(node))
        return true;
    if (isParameterOrMemberOfParameter(context))
        return true;
    const ref = context.getReference();
    if (ref && isMember(ref))
        return true;
    return false;
};
exports.isMemberOfFunctionParameter = isMemberOfFunctionParameter;
//# sourceMappingURL=isMemberOfFunctionParameter.js.map