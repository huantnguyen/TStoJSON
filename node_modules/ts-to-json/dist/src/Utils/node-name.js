"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAnyNodeName = exports.getNodeName = void 0;
const ts = __importStar(require("typescript"));
const symbolAtNode_1 = require("./symbolAtNode");
const LiteralType_1 = require("../Type/LiteralType");
const getPropName_1 = require("./getPropName");
const getNodeName = (node) => {
    if (!node)
        return;
    const symbol = (0, symbolAtNode_1.symbolAtNode)(node);
    if (symbol)
        return symbol === null || symbol === void 0 ? void 0 : symbol.name;
    const symbolLocale = (0, symbolAtNode_1.localSymbolAtNode)(node);
    if (symbolLocale)
        return symbolLocale.name;
    if (ts.isTypeReferenceNode(node) && ts.isIdentifier(node.typeName)) {
        return node.typeName.escapedText;
    }
    return node.getText();
};
exports.getNodeName = getNodeName;
const getAnyNodeName = (node) => {
    if (!node)
        return;
    if (node instanceof LiteralType_1.LiteralType) {
        return node.getName().split('"').join("");
    }
    else if (ts.isLiteralTypeNode(node)) {
        return node.literal.text;
    }
    else if (ts.isEnumMember(node) || ts.isTypeReferenceNode(node)) {
        return (0, exports.getNodeName)(node);
    }
    return (0, getPropName_1.getPropName)(node);
};
exports.getAnyNodeName = getAnyNodeName;
//# sourceMappingURL=node-name.js.map