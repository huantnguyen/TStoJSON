"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRootTopLevelDeclarationNode = exports.getClosestTopLevelDeclarationName = exports.getClosestTopLevelDeclarations = exports.isTopLevelDeclarations = void 0;
const ts = __importStar(require("typescript"));
const _1 = require(".");
const isTopLevelDeclarations = (node) => {
    switch (node.kind) {
        case ts.SyntaxKind.InterfaceDeclaration:
        case ts.SyntaxKind.EnumDeclaration:
        case ts.SyntaxKind.ClassDeclaration:
        case ts.SyntaxKind.VariableStatement:
        case ts.SyntaxKind.TypeAliasDeclaration:
        case ts.SyntaxKind.FunctionDeclaration:
        case ts.SyntaxKind.ModuleDeclaration:
            return true;
        default:
            return false;
    }
};
exports.isTopLevelDeclarations = isTopLevelDeclarations;
const getClosestTopLevelDeclarations = (node) => {
    if ((0, exports.isTopLevelDeclarations)(node))
        return node;
    if (node.parent) {
        return (0, exports.getClosestTopLevelDeclarations)(node.parent);
    }
    return undefined;
};
exports.getClosestTopLevelDeclarations = getClosestTopLevelDeclarations;
const getClosestTopLevelDeclarationName = (node) => {
    if (!node)
        return;
    const topNode = (0, exports.getClosestTopLevelDeclarations)(node);
    if (topNode) {
        return (0, _1.getNodeName)(topNode);
    }
    return;
};
exports.getClosestTopLevelDeclarationName = getClosestTopLevelDeclarationName;
const getRootTopLevelDeclarationNode = (node) => {
    if (!node)
        return;
    if (node.parent && !ts.isSourceFile(node.parent)) {
        return (0, exports.getRootTopLevelDeclarationNode)(node.parent);
    }
    return node;
};
exports.getRootTopLevelDeclarationNode = getRootTopLevelDeclarationNode;
//# sourceMappingURL=topLevelDeclarations.js.map