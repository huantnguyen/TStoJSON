"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPropsRecursively = void 0;
const _1 = require(".");
const ts = __importStar(require("typescript"));
const LiteralType_1 = require("../Type/LiteralType");
const getPropsRecursively = (node, context) => {
    const propName = (0, _1.getAnyNodeName)(node);
    let props;
    if (node instanceof LiteralType_1.LiteralType ||
        ((ts.isInterfaceDeclaration(node.parent) || ts.isUnionTypeNode(node.parent)) &&
            !context.hasParentContextRecreance())) {
        const contextRef = context.getReference();
        if (!(node instanceof LiteralType_1.LiteralType) && ts.isUnionTypeNode(node.parent)) {
            return (0, _1.getPropsFromTypeLiteralRecursively)(node.parent);
        }
        props = (0, _1.getPropsFromTypeLiteralRecursively)(contextRef);
    }
    else {
        props = ts.isEnumMember(node) ? [] : (0, _1.getPropsFromParentContextRecursively)(context);
        if ([ts.SyntaxKind.TypeLiteral, ts.SyntaxKind.EnumDeclaration].includes(node.parent.kind)) {
            const parentNode = ts.isEnumMember(node) ? context.getReference() : node.parent;
            if (parentNode) {
                const nodeParentProps = (0, _1.getPropsFromTypeLiteralRecursively)(parentNode, context.getSkipNode());
                props = [...props, ...nodeParentProps];
            }
        }
    }
    if (propName)
        props === null || props === void 0 ? void 0 : props.push(propName);
    return props;
};
exports.getPropsRecursively = getPropsRecursively;
//# sourceMappingURL=getPropsRecursively.js.map