"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RecursionTypeParser = void 0;
const ts = __importStar(require("typescript"));
const NodeParser_1 = require("./NodeParser");
const Utils_1 = require("./Utils");
const TypeReferenceNodeParser_1 = require("./NodeParser/TypeReferenceNodeParser");
class RecursionTypeParser {
    constructor(typeChecker, chainNodeParser, config) {
        this.typeChecker = typeChecker;
        this.chainNodeParser = chainNodeParser;
        this.config = config;
    }
    supportsNode(node) {
        if (node.kind !== ts.SyntaxKind.TypeReference || !(0, Utils_1.hasLimitOptions)(this.config) || !this.config.type)
            return false;
        const typeName = (0, Utils_1.getTypeReferenceNodeName)(node);
        const refTopLevelName = (0, Utils_1.getClosestTopLevelDeclarationName)(node);
        if (typeName === this.config.type && refTopLevelName === this.config.type) {
            return true;
        }
        return false;
    }
    createType(node, context, reference) {
        const parser = new TypeReferenceNodeParser_1.TypeReferenceNodeParser(this.typeChecker, this.chainNodeParser, this.config);
        const type = parser.createType(node, new NodeParser_1.Context(node, context));
        return type;
    }
}
exports.RecursionTypeParser = RecursionTypeParser;
//# sourceMappingURL=RecursionTypeParser.js.map