"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FunctionNodeParser = void 0;
const ts = __importStar(require("typescript"));
const NodeParser_1 = require("../NodeParser");
const FunctionType_1 = require("../Type/FunctionType");
const Utils_1 = require("../Utils");
const UnknownSymbolType_1 = require("../Type/UnknownSymbolType");
class FunctionNodeParser {
    constructor(typeChecker, childNodeParser, config) {
        this.typeChecker = typeChecker;
        this.childNodeParser = childNodeParser;
        this.config = config;
    }
    supportsNode(node) {
        return (0, Utils_1.isFunctionKind)(node);
    }
    pushParameters(node, context) {
        if (node.typeParameters && node.typeParameters.length) {
            node.typeParameters.forEach((typeParam) => {
                const nameSymbol = this.typeChecker.getSymbolAtLocation(typeParam.name);
                context.pushParameter(nameSymbol.name);
                let type;
                if (typeParam.default) {
                    type = this.childNodeParser.createType(typeParam.default, context);
                }
                if (!type) {
                    type = new UnknownSymbolType_1.UnknownSymbolType(node, nameSymbol, this.config.allowArbitraryDataTypes);
                }
                context.setDefault(nameSymbol.name, type);
            });
        }
    }
    createType(node, context) {
        this.pushParameters(node, context);
        return new FunctionType_1.FunctionType(this.getTypeId(node, context), [], this.getParameters(node, context), this.getAdditionalParameters(node, context), this.childNodeParser.createType(node.type, context));
    }
    getParameters(node, context) {
        return node.parameters.filter(ts.isParameter).reduce((result, parameterNode) => {
            const parameterSymbol = (0, Utils_1.symbolAtNode)(parameterNode);
            if (!parameterSymbol)
                return result;
            if ((0, Utils_1.isNodeHidden)(parameterNode)) {
                return result;
            }
            const newContext = new NodeParser_1.Context(parameterNode);
            this.pushParameters(node, newContext);
            newContext.isParameter = true;
            const objectParameter = new FunctionType_1.FunctionParameter(parameterSymbol.getName(), this.childNodeParser.createType(parameterNode.type, newContext), !parameterNode.questionToken);
            result.push(objectParameter);
            return result;
        }, []);
    }
    getAdditionalParameters(node, context) {
        const indexSignature = node.parameters.find(ts.isIndexSignatureDeclaration);
        if (!indexSignature) {
            return false;
        }
        return this.childNodeParser.createType(indexSignature.type, context);
    }
    getTypeId(node, context) {
        const fullName = `function-${node.getFullStart()}`;
        const argumentIds = context.getArguments().map((arg) => arg.getId());
        return argumentIds.length ? `${fullName}<${argumentIds.join(",")}>` : fullName;
    }
}
exports.FunctionNodeParser = FunctionNodeParser;
//# sourceMappingURL=FunctionNodeParser.js.map